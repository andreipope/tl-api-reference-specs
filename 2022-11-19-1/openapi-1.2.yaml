x-readme:
  samples-languages:
    - "http"
    - "curl"
    - "python"
    - "go"
    - "node"
openapi: 3.1.0
info:
  title: Twelve Labs Video Understanding API
  description: |
    Use the Twelve Labs Video Understanding API to extract information from your videos and make it available to your applications. The API is organized around REST and returns responses in the JSON format. It is compatible with most programming languages, and you can also use Postman or other REST clients to send requests and view responses.
  contact:
    name: Twelve Labs Support
    email: support@twelvelabs.io
  version: 1.2.0 
servers:
  - url: 'https://api.twelvelabs.io/v1.2'

################
###   Tags   ###
################

tags:
  - name: Manage engines
  - name: Manage indexes
  - name: Upload videos
  - name: Manage videos
  - name: Text-to-video search
  - name: Any-to-video search
  - name: Classify
  - name: Create text embeddings
  - name: Create video embeddings
  - name: Generate text from video
  - name: Extract video data
  - name: Create text, image, and audio embeddings

paths:

###################
###   Engines   ###
###################

  '/engines':
    summary:  Engines
    get:
      summary: List engines
      # x-readme:
      #   code-samples:
      #     - language: python
      #       code: |
      #         from twelvelabs import TwelveLabs
      #         client = TwelveLabs(api_key="<YOUR_API_KEY>")
      #         engines = client.engine.list()
      #         print(engines)
      #       name: Twelve Labs Python SDK
      #       install: pip install twelvelabs
      #     - language: node
      #       code: |
      #         import { TwelveLabs } from 'twelvelabs-js';
      #         (async () => {
      #           const client = new TwelveLabs({ apiKey: '<YOUR_API_KEY>' });
      #           const engines = await client.engine.list();
      #           console.log(engines);
      #         })();              
      #       name: Twelve Labs JS SDK
      #       install: yarn add twelvelabs-js
      description: This method lists all the engines that are available in your account.
      operationId: list-engines
      tags:
        - Manage engines
      parameters:
        - $ref: '#/components/parameters/x-api-key'
        - $ref: '#/components/parameters/Content-Type'
      responses:
        '200':
          $ref: '#/components/responses/getEnginesResponse'
        '400':
          $ref: '#/components/responses/genericError'

  '/engines/{engine-id}':
    get:
      summary: Retrieve an engine
      # x-readme:
      #   code-samples:
      #     - language: python
      #       code: |
      #         from twelvelabs import TwelveLabs
      #         client = TwelveLabs(api_key="<YOUR_API_KEY>")
      #         engine = client.engine.retrieve('pegasus1.1')
      #         print(engine)
      #       name: Twelve Labs Python SDK
      #       install: pip install twelvelabs
      #     - language: node
      #       code: |
      #         import { TwelveLabs } from 'twelvelabs-js';
      #         (async () => {
      #           const client = new TwelveLabs({ apiKey: '<YOUR_API_KEY>' });
      #           const engine = await client.engine.retrieve('pegasus1.1');
      #           console.log(engine);
      #         })();              
      #       name: Twelve Labs JS SDK
      #       install: yarn add twelvelabs-js
      description: This method retrieves an engine.
      operationId: retrieve-engine
      tags:
        - Manage engines
      parameters:
        - $ref: '#/components/parameters/x-api-key'
        - $ref: '#/components/parameters/Content-Type'
        - name: engine-id
          in: path
          description: |
            The identifier of the engine to retrieve. The following engines are available:
                            
            - **Embedding**: These engines are proficient at performing tasks such as search and classification, enabling enhanced video understanding.

              - `marengo2.6`

            - **Generative**: These engines generate text based on your videos.

              - `pegasus1.1`

            For details about the features of each engine, see the [Video understanding engines](/docs/video-understanding-engines) page.
          required: true
          schema:
            type: string
            example: marengo2.6
      responses:
        '200':
          $ref: '#/components/responses/getEngineResponse'
        '404':
          $ref: '#/components/responses/notFound'

#################
###   Tasks   ###
#################

  /tasks:
    post:
      summary: Create a video indexing task
      # x-readme:
      #   code-samples:
      #     - language: python
      #       code: |
      #         from twelvelabs import TwelveLabs
      #         task = client.task.create(
      #           index_id='<YOUR_INDEX_ID>',
      #           file='<YOUR_FILE_PATH>',
      #         )
      #         print(f"Task id={task.id}")
      #       name: Twelve Labs Python SDK
      #       install: pip install twelvelabs
      #     - language: node
      #       code: |
      #         import { TwelveLabs } from 'twelvelabs-js';
      #         (async () => {
      #           const client = new TwelveLabs({ apiKey: '<YOUR_API_KEY>' });
      #           const task = await client.task.create({
      #             indexId: '<YOUR_INDEX_ID',
      #             file: '<YOUR_FILE_NAME' # Example'./assets/1.mp4',
      #           });
      #           console.log(`Task id=${task.id}`);
      #         })();              
      #       name: Twelve Labs JS SDK
      #       install: yarn add twelvelabs-js
      description: |
        Use this method to create a new video indexing task that uploads and indexes a video. Note the following about creating a new video indexing task:
        - To upload a file that resides on the local file system, pass the `video_file` parameter. It must be a stream of bytes encoded as `multipart/form-data`.
        - To upload a file from a publicly accessible URL, pass the `video_url` parameter with the URL of your video. It must be a `string`.
        - You must specify at least one of the `video_file` and `video_url` parameters. If you specify both the `video_url` and `video_file` parameters in the same request, the `video_url` parameter takes precedence over `video_file`.
        - To provide a transcription file, you must set the `provide_transcription` parameter to `true` and specify at least one of the `transcription_file` and `transcription_url` parameters:
          - Use the `transcription_file` parameter to provide a transcription from the local file system. It must be a stream of bytes encoded as `multipart/form-data`.
          - Use the `transcription_url` parameter to provide a transcription file from a publicly accessible URL. It must be a `string`.

        **NOTES**:
        - The platform supports uploading video files that can play without additional user interaction or custom video players. Ensure your URL points to the raw video file, not a web page containing the video. Links to third-party hosting sites, cloud storage services, or videos requiring extra steps to play are not supported.
        - This endpoint is rate-limited. For details, see the [Rate limits](/docs/rate-limits) page.
      operationId: create-video-indexing-task
      tags:
        - Upload videos
      requestBody:
        $ref: '#/components/requestBodies/createVideoIndexingTask'
      parameters:
        - $ref: '#/components/parameters/x-api-key'
        - $ref: '#/components/parameters/multipart'
      responses:
        '200':
          $ref: '#/components/responses/createVideoIndexingTaskResponse'
        '400':
          $ref: '#/components/responses/insufficientFunds'
    
    get:
      summary: List video indexing tasks
      description: This method returns a list of the video indexing tasks in your account. The API returns your video indexing tasks sorted by creation date, with the newest at the top of the list.
      operationId: list-video-indexing-tasks
      tags:
        - Upload videos
      parameters:
        - $ref: '#/components/parameters/x-api-key'
        - $ref: '#/components/parameters/Content-Type'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/page_limit'
        - $ref: '#/components/parameters/sort_by'
        - $ref: '#/components/parameters/sort_option'
        - $ref: '#/components/parameters/_id'
        - $ref: '#/components/parameters/index_id'
        - $ref: '#/components/parameters/filename'
        - $ref: '#/components/parameters/duration'
        - $ref: '#/components/parameters/width'
        - $ref: '#/components/parameters/height'
        - $ref: '#/components/parameters/created_at'
        - $ref: '#/components/parameters/updated_at'
        - $ref: '#/components/parameters/estimated_time'

      responses:
        '200':
          $ref: '#/components/responses/getVideoIndexingTasksResponse'
        '400':
          $ref: '#/components/responses/genericError'
  
  '/tasks/{task_id}':
    get:
      summary: Retrieve a video indexing task
      description: This method retrieves a video indexing task.
      operationId: retrieve-video-indexing-task
      tags:
        - Upload videos
      parameters:
        - $ref: '#/components/parameters/x-api-key'
        - $ref: '#/components/parameters/Content-Type'
        - name: task_id
          in: path
          description: |
            The unique identifier of the video indexing task to retrieve.
          required: true
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/getVideoIndexingTaskResponse'
        '400':
          $ref: '#/components/responses/genericError'
    delete:
      summary: Delete a video indexing task
      description: |
        This action cannot be undone.
        Note the following about deleting a video indexing task:
        - You can only delete video indexing tasks for which the status is `ready` or `failed`.
        - If the status of your video indexing task is `ready`, you must first delete the video vector associated with your video indexing task by calling the [`DELETE`](/reference/delete-video-information) method of the `/indexes/videos` endpoint.
      operationId: delete-video-indexing-task
      tags:
        - Upload videos
      parameters:
        - $ref: '#/components/parameters/x-api-key'
        - $ref: '#/components/parameters/Content-Type'
        - name: task_id
          in: path
          description: |
            The unique identifier of the video indexing task you want to delete.
          required: true
          schema:
            type: string
      responses:
        '204':
          $ref: '#/components/responses/noContentResponse'
        '400':
          $ref: '#/components/responses/genericError'

  '/tasks/status':
    get:
      summary: Retrieve tasks by status
      description: This method retrieves the number video indexing tasks in each status for the specified index.
      operationId: video-indexing-tasks-by-status
      tags:
        - Upload videos
      parameters:
        - $ref: '#/components/parameters/x-api-key'
        - $ref: '#/components/parameters/Content-Type'
        - name: index_id
          in: query
          description: The unique identifier of the index for which you want to retrieve the number video indexing tasks in each status.
          required: true
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/retrieveSummaryVideoIndexingTaskResponse'
        '400':
          $ref: '#/components/responses/genericError'
  
  ###########################
  ###   Tasks/Transfers   ###
  ###########################

  '/tasks/transfers':
    post:
      summary: Make a cloud-to-cloud transfer
      description: |
        This method makes a cloud-to-cloud transfer.
      parameters:
        - $ref: '#/components/parameters/x-api-key'
        - $ref: '#/components/parameters/multipart'
      operationId: cloud-to-cloud-transfer
      tags:
        - Upload videos
      requestBody:
        $ref: '#/components/requestBodies/cloud-to-cloud-transfer'
      responses:
        '204':
          $ref: '#/components/responses/noContentResponse'
        '400':
          $ref: '#/components/responses/genericError'

  ####################################
  ###   Tasks/External Providers   ###
  ####################################
  
  # '/tasks/external-provider':
  #   post:
  #     summary: Upload videos from external providers
  #     description: |
  #       Use this endpoint to upload videos from external providers. The platform currently supports only YouTube as an external provider, but we will add support for additional providers in the future.
  #     operationId: upload-external-provider
  #     tags:
  #       - Tasks
  #     parameters:
  #       - $ref: '#/components/parameters/x-api-key'
  #     requestBody:
  #       $ref: '#/components/requestBodies/upload-external-provider'
  #     responses:
  #       '201':
  #         $ref: '#/components/responses/createVideoIndexingTaskResponse'
  #       '400':
  #         $ref: '#/components/responses/genericError'

###################
###   Indexes   ###
###################

  '/indexes':
    post:
      summary: Create an index
      description: |
        This method creates an index.

      operationId: create-index
      tags:
        - Manage indexes
      parameters:
        - $ref: '#/components/parameters/x-api-key'
        - $ref: '#/components/parameters/Content-Type'
      requestBody:
        $ref: '#/components/requestBodies/createIndex'
      responses:
        '201':
          $ref: '#/components/responses/createIndexResponse'
        '400':
          $ref: '#/components/responses/genericError'
    get:
      summary: List indexes
      description: |
        This method returns a list of the indexes in your account. The API returns indexes sorted by creation date, with the oldest indexes at the top of the list.

      operationId: list-indexes
      tags:
        - Manage indexes
      parameters:
        - $ref: '#/components/parameters/x-api-key'
        - $ref: '#/components/parameters/Content-Type'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/page_limit'
        - $ref: '#/components/parameters/sort_by'
        - $ref: '#/components/parameters/sort_option'
        - name: _id
          in: query
          description: Filter by the unique identifier of an index.
          required: false
          schema:
            type: string
        - name: index_name
          in: query
          description: Filter by the name of an index.
          required: false
          schema:
            type: string
        - name: engine_options
          in: query
          description: |
            Filter by the engine options. When filtering by multiple engine options, the values must be comma-separated.
          required: false
          schema:
            type: string
          example: engine_options=visual,conversation
        - name: engine_family
          in: query
          description: |
            Filter by the engine family. This parameter can take one of the following values: `marengo` or `pegasus`. You can specify a single value.
          schema: 
            type: string
          required: false
        - name: index_options
          in: query
          description: |
            Filter by the indexing options. When filtering by multiple indexing options, the values must be comma-separated.

            **NOTE:** This parameter is supported for backward compatibility and will be deprecated in a future release. Instead, use `engine_options` or `engine_family`.
          required: false
          schema:
            type: string
          example: index_options=visual,conversation
        - name: created_at
          in: query
          description: |
            Filter indexes by the creation date and time, in the [RFC 3339](https://datatracker.ietf.org/doc/html/rfc3339) format ("YYYY-MM-DDTHH:mm:ssZ"). The platform returns the indexes that were created on the specified date at or after the given time.
          schema:
            type: string
          required: false
          example: 2024-08-16T16:53:59Z
        - name: updated_at
          in: query
          description: |
            Filter indexes by the last update date and time, in the [RFC 3339](https://datatracker.ietf.org/doc/html/rfc3339) format ("YYYY-MM-DDTHH:mm:ssZ"). The platform returns the indexes that were last updated on the specified date at or after the given time.
          schema:
            type: string
          required: false
          example: 2024-08-16T16:55:59Z
      responses:
        '200':
          $ref: '#/components/responses/getIndexesResponse'
        '400':
          $ref: '#/components/responses/genericError'
  
  '/indexes/{index-id}':
    get:
      summary: Retrieve an index
      description: |
        This method retrieves details about the specified index.
      operationId: retrieve-index
      tags:
        - Manage indexes
      parameters:
        - $ref: '#/components/parameters/x-api-key'
        - $ref: '#/components/parameters/Content-Type'
        - name: index-id
          in: path
          description: |
            Unique identifier of the index to retrieve.
          required: true
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/getIndexResponse'
        '400':
          $ref: '#/components/responses/genericError'
    put:
      summary: Update an index
      description: |
        This method updates the name of the specified index.

      operationId: update-index
      tags:
        - Manage indexes
      parameters:
        - $ref: '#/components/parameters/x-api-key'
        - $ref: '#/components/parameters/Content-Type'
        - name: index-id
          in: path
          description: |
            Unique identifier of the index to update.
          required: true
          schema:
            type: string
      requestBody:
        $ref: '#/components/requestBodies/updateIndex'
      responses:
        '204':
          $ref: '#/components/responses/noContentResponse'
        '400':
          $ref: '#/components/responses/genericError'
    delete:
      summary: Delete an index
      description: This method deletes the specified index and all the videos within it. This action cannot be undone.
      operationId: delete-index
      tags:
        - Manage indexes
      parameters:
        - $ref: '#/components/parameters/x-api-key'
        - $ref: '#/components/parameters/Content-Type'
        - name: index-id
          in: path
          description: |
            Unique identifier of the index to delete.
          required: true
          schema:
            type: string
      responses:
        '204':
          $ref: '#/components/responses/noContentResponse'
        '400':
          $ref: '#/components/responses/genericError'

##########################
###   indexes/videos   ###
##########################

  '/indexes/{index-id}/videos':
    get:
      summary: List videos
      operationId: list-videos
      description: |
        This method returns a list of the videos in the specified index. By default, the API returns your videos sorted by creation date, with the newest at the top of the list.
      tags:
        - Manage videos
      parameters:
        - $ref: '#/components/parameters/x-api-key'
        - $ref: '#/components/parameters/Content-Type'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/page_limit'
        - $ref: '#/components/parameters/sort_by'
        - $ref: '#/components/parameters/sort_option'
        - name: index-id
          in: path
          description: The unique identifier of the index for which the API will retrieve the videos.
          schema:
            type: string
          required: true
        - name: _id
          in: query
          description: |
            Filter by the unique identifier of a video index.
          required: false
          schema:
            type: string
        - name: filename
          in: query
          description: |
            Filter by filename.
          required: false
          schema:
            type: string
        - name: duration
          in: query
          description: |
            Filter by duration. Expressed in seconds.
          schema:
            type: number
        - name: fps
          in: query
          description: |
            Filter by frames per second.
          required: false
          schema:
            type: number
        - name: width
          in: query
          description: |
            Filter by width.
          required: false
          schema:
            type: number
        - name: height
          in: query
          description: |
            Filter by height.
          required: false
          schema:
            type: integer
        - name: size
          in: query
          description: |
            Filter by size. Expressed in bytes.
          required: false
          schema:
            type: number
        - name: created_at
          in: query
          description: |
            Filter videos by the creation date and time of their associated indexing tasks, in the [RFC 3339](https://datatracker.ietf.org/doc/html/rfc3339) format ("YYYY-MM-DDTHH:mm:ssZ"). The platform returns the videos whose indexing tasks were created on the specified date at or after the given time.
          required: false
          schema:
            type: string
        - name: updated_at
          in: query
          description: |
            This filter applies only to videos updated using the [`PUT`](/reference/update-video-information) method of the `/indexes/{index-id}/videos/{video-id}` endpoint. It filters videos by the last update date and time, in the [RFC 3339](https://datatracker.ietf.org/doc/html/rfc3339) format ("YYYY-MM-DDTHH:mm:ssZ"). The platform returns the video indexing tasks that were last updated on the specified date at or after the given time. 
          required: false
          schema:
            type: string
        - name: indexed_at
          in: query
          description: |
            Filter videos by the completion time of their associated indexing tasks, in the [RFC 3339](https://datatracker.ietf.org/doc/html/rfc3339) format ("YYYY-MM-DDTHH:mm:ssZ"). The platform returns the videos whose indexing tasks were completed on the specified date at or after the given time. 
          required: false
          schema:
            type: string
        - name: metadata # Arbitrary name that won't be included in the request URL.
          in: query
          description: |
            To enable filtering by custom fields, first add metadata to your video by calling the [`PUT](/reference/update-video-information) method of the `/indexes/:index-id/videos/:video-id` endpoint.

            Examples:
            - To filter on a string: `?category=recentlyAdded`
            - To filter on an integer: `?batchNumber=5`
            - To filter on a float: `?rating=9.3`
            - To filter on a boolean: `?needsReview=true`
          schema:
            type: object
            propertyNames:
              pattern: '^[A-Za-z][A-Za-z0-9]*$'  # Parameter names
            additionalProperties:
              pattern: '^[A-Za-z][A-Za-z0-9]*$'
          style: form
          explode: true

      responses:
        '200':
          $ref: '#/components/responses/getVideoVectorsResponse'
        '400':
          $ref: '#/components/responses/genericError'

  '/indexes/{index-id}/videos/{video-id}':
    get:
      summary: Retrieve video information
      description: This method retrieves information about the specified video.
      operationId: retrieve-video-information
      tags:
        - Manage videos
      parameters:
        - $ref: '#/components/parameters/x-api-key'
        - $ref: '#/components/parameters/Content-Type'
        - name: index-id
          in: path
          description: |
            The unique identifier of the index to which the video has been uploaded.
          required: true
          schema:
            type: string
        - name: video-id
          in: path
          description: |
            The unique identifier of the video to retrieve.
          required: true
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/getVideoVectorResponse'
        '400':
          $ref: '#/components/responses/genericError'
    put:
      summary: Update video information
      description: Use this method to update the title and the metadata of a video.
      operationId: update-video-information
      tags:
        - Manage videos
      parameters:
        - $ref: '#/components/parameters/x-api-key'
        - $ref: '#/components/parameters/Content-Type'
        - name: index-id
          in: path
          description: |
            The unique identifier of the index to which the video has been uploaded.
          required: true
          schema:
            type: string
        - name: video-id
          in: path
          description: |
            The unique identifier of the video to update.
          required: true
          schema:
            type: string
      requestBody:
        $ref: '#/components/requestBodies/update-video-vector'

      responses:
        '204':
          $ref: '#/components/responses/noContentResponse'
        '400':
          $ref: '#/components/responses/genericError'
    delete:
      summary: Delete video information
      operationId: delete-video-information
      tags:
        - Manage videos
      description: |
        This method deletes all the information about the specified video This action cannot be undone.
      parameters:
        - $ref: '#/components/parameters/x-api-key'
        - $ref: '#/components/parameters/Content-Type'
        - name: index-id
          in: path
          description: |
            The unique identifier of the index to which the video has been uploaded.
          required: true
          schema:
            type: string
        - name: video-id
          in: path
          description: |
            The unique identifier of the video to delete.
          required: true
          schema:
            type: string
      responses:
        '204':
          $ref: '#/components/responses/noContentResponse'
        '400':
          $ref: '#/components/responses/genericError'

  '/indexes/{index-id}/videos/{video-id}/transcription':
    get:
      summary: Retrieve a transcription
      description: This method retrieves a transcription of the spoken words.
      operationId: retrieve-transcription
      tags:
        - Extract video data
      parameters:
        - $ref: '#/components/parameters/x-api-key'
        - $ref: '#/components/parameters/Content-Type'
        - name: index-id
          in: path
          description: |
            The unique identifier of the index to which the video has been uploaded.
          required: true
          schema:
            type: string
        - name: video-id
          in: path
          description: |
            The unique identifier of the video for which you want to retrieve a transcription.
          required: true
          schema:
            type: string
        - name: start
          in: query
          description: |
            The start of the time range (in seconds) to retrieve transcription for.
          required: false
          schema:
            type: number
        - name: end
          in: query
          description: |
            The end of the time range (in seconds) to retrieve transcription for.
          required: false
          schema:
            type: number
      responses:
        '200':
          $ref: '#/components/responses/retrieveTranscriptionResponse'
        '400':
          $ref: '#/components/responses/genericError'


  '/indexes/{index-id}/videos/{video-id}/text-in-video':
    get:
      summary: Retrieve text recognized in video (OCR)
      description: This method retrieves text recognized in video (OCR).
      operationId: retrieve-ocr
      tags:
        - Extract video data
      parameters:
        - $ref: '#/components/parameters/x-api-key'
        - $ref: '#/components/parameters/Content-Type'
        - name: index-id
          in: path
          description: |
            The unique identifier of the index to which the video has been uploaded.
          required: true
          schema:
            type: string
        - name: video-id
          in: path
          description: |
            The unique identifier of the video.
          required: true
          schema:
            type: string
        - name: start
          in: query
          description: |
            The start of the time range (in seconds) to retrieve OCRs for.
          required: false
          schema:
            type: number
        - name: end
          in: query
          description: |
            The end of the time range (in seconds) to retrieve OCRs for.
          required: false
          schema:
            type: number
      responses:
        '200':
          $ref: '#/components/responses/retrieveOcrResponse'
        '400':
          $ref: '#/components/responses/genericError'

  '/indexes/{index-id}/videos/{video-id}/logo':
    get:
      summary: Extract logos
      description: Use this method to identify the presence of brand logos within your videos.

      operationId: identify-logos
      tags:
        - Extract video data
      parameters:
        - $ref: '#/components/parameters/x-api-key'
        - $ref: '#/components/parameters/Content-Type'
        - name: index-id
          in: path
          description: |
            The unique identifier of the index to which the video has been uploaded.
          required: true
          schema:
            type: string
        - name: video-id
          in: path
          description: |
            The unique identifier of the video.
          required: true
          schema:
            type: string
        - name: start
          in: query
          description: |
            The start of the time range (in seconds) to retrieve logos for.
          required: false
          schema:
            type: number
        - name: end
          in: query
          description: |
            The end of the time range (in seconds) to retrieve logos for.
          required: false
          schema:
            type: number
      responses:
        '200':
          $ref: '#/components/responses/retrieveLogoResponse'
        '400':
          $ref: '#/components/responses/genericError'
  

  '/indexes/{index_id}/videos/{video_id}/thumbnail':
    get:
      summary: Retrieve a thumbnail
      description: To use this feature, you must enable thumbnail generation for the index to which the video has been uploaded. For details, see the [Create an index](/reference/create-index) section.
      operationId: retrieve-thumbnail
      tags:
        - Extract video data
      parameters:
        - $ref: '#/components/parameters/x-api-key'
        - $ref: '#/components/parameters/Content-Type'
        - name: index_id
          in: path
          description: |
            The unique identifier of the index to which the video has been uploaded.
          required: true
          schema:
            type: string
        - name: video_id
          in: path
          description: |
            The unique identifier of the video from which you want to retrieve a thumbnail.
          required: true
          schema:
            type: string
        - name: time
          in: query
          description: |
            Specifies the time, in seconds, at which the platform must retrieve the thumbnail. If you don't specify this parameter, the platform retrieves a thumbnail from the middle of the video.
          required: false
          schema:
            type: number
      responses:
        '200':
          $ref: '#/components/responses/retrieveThumbnailResponse'
        '400':
          $ref: '#/components/responses/genericError'

##################
###   Search   ###
##################

  '/search':
    post:
      summary: Make a text-to-video search request
      tags:
        - Text-to-video search
      description: |
        This endpoint will be deprecated. Twelve Labs recommends you use the [Any-to-video search](/reference/any-to-video-search) endpoint instead.

        **NOTES**:
        - When you use pagination, you will not be charged for retrieving subsequent pages of results.
        - This endpoint is rate-limited. For details, see the [Rate limits](/docs/rate-limits) page.
      operationId: make-search-request
      requestBody:
        $ref: '#/components/requestBodies/search'
      parameters:
        - $ref: '#/components/parameters/x-api-key'
        - $ref: '#/components/parameters/Content-Type'
      responses:
        '200':
          $ref: '#/components/responses/searchResultsResponse' 
        '400':
          $ref: '#/components/responses/genericError'
        '429':
          description: |
            If the rate limit is reached, the platform returns an `HTTP 429 - Too many requests` error response. The response body is empty.


  '/search/combined':
    post:
      x-readme:
        explorer-enabled: false
      summary: Make a combined search request
      operationId: combined-queries-make-search-request
      tags:
        - Text-to-video search
      description: |
        Use this method to search for relevant matches in an index using combined queries.

        For clarity, the combined search feature is documented in this section. However, note that the `/search` endpoint supports all the features of the `/combined-search` endpoint.
        
        This method returns the first page of results. To retrieve the subsequent pages, you must call the [`GET`](/reference/combined-queries-retrieve-specific-page) method of the `/combined-search/{page-token}` endpoint, passing it the unique identifier of the page you want to retrieve.

        **NOTES**:
        - Twelve Labs Inc. has disabled calling this method from this page to avoid confusion and recommends you invoke it using one of the available [SKDs](/docs/twelve-labs-sdks). See the [Use combined queries](/docs/search-combined-queries) page for details.
        - This endpoint is rate-limited. For details, see the [Rate limits](/docs/rate-limits) page.
        - When you use pagination, you will not be charged for retrieving subsequent pages of results.
          
      parameters:
        - $ref: '#/components/parameters/x-api-key'
        - $ref: '#/components/parameters/Content-Type'
      requestBody:
        $ref: '#/components/requestBodies/combinedSearch'
      responses:
        '200':
          $ref: '#/components/responses/combinedSearchResultsResponse'
        '400':
          $ref: '#/components/responses/genericError'
        '429':
          description: |
            If the rate limit is reached, the platform returns an `HTTP 429 - Too many requests` error response. The response body is empty.
  '/search/{page-token}':
    get:
      summary: Retrieve a specific page of search results
      tags:
        - Text-to-video search
      description: |
        This endpoint will be deprecated. Twelve Labs recommends you use the [Any-to-video search](/reference/any-to-video-search) endpoint instead.

        **NOTE**: When you use pagination, you will not be charged for retrieving subsequent pages of results.
      operationId: search-retrieve-specific-page
      parameters:
        - $ref: '#/components/parameters/x-api-key'
        - $ref: '#/components/parameters/Content-Type'
        - name: page-token
          in: path
          required: true
          description: |
            A token that identifies the page to retrieve.
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/searchResultsResponsePageId'
        '400':
          $ref: '#/components/responses/searchResultsError'

  '/search/combined/{page-token}':
    get:
      summary: Retrieve a specific page of combined search results
      tags:
        - Text-to-video search
      description: |
        Use this endpoint to retrieve a specific page of search results.

        **NOTE**: When you use pagination, you will not be charged for retrieving subsequent pages of results.

      operationId: combined-queries-retrieve-specific-page
      parameters:
        - $ref: '#/components/parameters/x-api-key'
        - $ref: '#/components/parameters/Content-Type'
        - name: page-token
          in: path
          required: true
          description: |
            A token that identifies the page to retrieve.
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/combinedSearchSpecificPageResultsResponse'
        '400':
          $ref: '#/components/responses/searchResultsError'

####################
###   Classify   ###
####################

  '/classify':
    post:
      summary: Classify a set of videos
      description: |
        Use this method to classify a set of videos based on the entities or actions shown in those videos. Note that this endpoint returns the first page or results. To retrieve the rest of the pages, you must call the [`GET`](/reference/classify-retrieve-specific-page) method of the `/classify/{page_token}` endpoint passing it the token that identifies the page you want to retrieve.

        **NOTES**: 
        - This endpoint is rate-limited. For details, see the [Rate limits](/docs/rate-limits) page.
        - The total number of the prompts you specify in a request must not exceed 100.
        - The total duration of the videos you classify in a request must not exceed 10 hours.
        - When you use pagination, you will not be charged for retrieving subsequent pages of results.

      parameters:
        - $ref: '#/components/parameters/x-api-key'
        - $ref: '#/components/parameters/Content-Type'
      operationId: classify-video
      tags:
        - Classify
      requestBody:
        $ref: '#/components/requestBodies/classifyRequestNew'
      responses:
        '200':
          $ref: '#/components/responses/classifyResponseNew'
        '400':
          $ref: '#/components/responses/classify10hours'
        '429':
          description: |
            If the rate limit is reached, the platform returns an `HTTP 429 - Too many requests` error response. The response body is empty.

  '/classify/bulk':
    post:
      summary: Classify all the videos in an index
      description: |
        Use this method to classify all the videos in the specified index based on the entities or actions shown in those videos. Note that this endpoint returns the first page or results. To retrieve the rest of the pages, you must call the [`GET`](/reference/classify-retrieve-specific-page) method of the `/classify/{page_token}` endpoint passing it the token that identifies the page you want to retrieve.

        **NOTES**: 
        - This endpoint is rate-limited. For details, see the [Rate limits](/docs/rate-limits) page. 
        - The total number of prompts you specify in a request must not exceed 100.
        - When you use pagination, you will not be charged for retrieving subsequent pages of results.
      operationId: classify-bulk
      tags:
        - Classify
      parameters:
        - $ref: '#/components/parameters/x-api-key'
        - $ref: '#/components/parameters/Content-Type'
      requestBody:
        $ref: '#/components/requestBodies/classifyRequestBulkNew'
      responses:
        '200':
          $ref: '#/components/responses/classifyBulkResponseNew'
        '400':
          $ref: '#/components/responses/genericError'
        '429':
          description: |
            If the rate limit is reached, the platform returns an `HTTP 429 - Too many requests` error response. The response body is empty.

  '/classify/{page_token}':
    get:
      summary: Retrieve a specific page of results
      description: |
        The `classify` and `/classify/bulk` endpoints return the first page or results. You can use this endpoint to retrieve the rest of the pages.

        **NOTE**: When you use pagination, you will not be charged for retrieving subsequent pages of results.
        
      operationId: classify-retrieve-specific-page
      tags:
        - Classify
      parameters:
        - $ref: '#/components/parameters/x-api-key'
        - $ref: '#/components/parameters/Content-Type'
        - name: page_token
          description: A token that identifies the page to retrieve.
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/classifyBulkResponseNewSpecificPage'
        '400':
          $ref: '#/components/responses/genericError'

####################
###   Generate   ###
####################

  '/gist':
    post:
      summary: Titles, topics, or hashtags
      description: |
        This endpoint generates concise overviews in the form of titles, topics, and hashtags representing the key elements or themes of a video.

        **NOTE**: This endpoint is rate-limited. For details, see the [Rate limits](/docs/rate-limits) page.

      parameters:
        - $ref: '#/components/parameters/x-api-key'
        - $ref: '#/components/parameters/Content-Type'
      operationId: generate-gist
      tags:
        - Generate text from video
      requestBody:
        $ref: '#/components/requestBodies/gistRequest'
      responses:
        '200':
          $ref: '#/components/responses/gistResponse'
        '400':
          $ref: '#/components/responses/genericError'
        '429':
          description: |
            If the rate limit is reached, the platform returns an `HTTP 429 - Too many requests` error response. The response body is empty.
          
  '/summarize':
    post:
      summary: Summaries, chapters, or highlights
      description: |
        This endpoint generates summaries, chapters, or highlights for your videos. Optionally, you can provide a prompt to customize the output.

        **NOTE**: This endpoint is rate-limited. For details, see the [Rate limits](/docs/rate-limits) page. 
      parameters:
        - $ref: '#/components/parameters/x-api-key'
        - $ref: '#/components/parameters/Content-Type'
      operationId: summarize
      tags:
        - Generate text from video
      requestBody:
        $ref: '#/components/requestBodies/summarizeRequest'
      responses:
        '200':
          $ref: '#/components/responses/summarizeResponse'
        '400':
          $ref: '#/components/responses/genericError'
        '429':
          description: |
            If the rate limit is reached, the platform returns an `HTTP 429 - Too many requests` error response. The response body is empty.

  '/generate':
    post:
      summary: Open-ended texts
      description: |
        This endpoint generates open-ended texts based on your videos, including but not limited to tables of content, action items, memos, and detailed analyses.

        **NOTES**:
        - This endpoint is rate-limited. For details, see the [Rate limits](/docs/rate-limits) page.
        - This endpoint supports streaming responses. For details on integrating this feature into your application, refer to the [Streaming response](/docs/streaming-responses) guide.
      parameters:
        - $ref: '#/components/parameters/x-api-key'
        - $ref: '#/components/parameters/Content-Type'
      operationId: generate-text-representation
      tags:
        - Generate text from video
      requestBody:
        $ref: '#/components/requestBodies/generateTextRepresentationRequest'
      responses:
        '200':
          description: The specified video has successfully been processed.
          headers:
            X-Ratelimit-Limit:
              schema:
                type: number
              description: The maximum number of requests you can make per rate limit window for this endpoint. For details, see the [Rate limits](/docs/rate-limits) page.
              example: 100
            X-Ratelimit-Remaining:
              schema:
                type: number
              description: The number of requests remaining in the current rate limit window for the specific endpoint. This value decreases with each request you make to that endpoint and resets at the start of the next rate limit window.
              example: 99
            X-Ratelimit-Used:
              schema:
                type: number
              description: The number of requests you have made in the current rate limit window for the specific endpoint. This value increases with each request you make to that endpoint and resets to zero at the start of the next rate limit window.
              example: 1
            X-Ratelimit-Reset:
              schema:
                type: number
              description: The time at which the current rate limit window resets, expressed in UTC epoch seconds. After this time, the values of the `X-Ratelimit-Remaining` and `X-Ratelimit-Used` parameters will be reset to their initial values for the next rate limit window.
              example: 1718777276
            Transfer-Encoding:
              schema:
                type: string
                description: The platform returns this header when the `stream` parameter is set to `true` in the request. It indicates that the response body is sent in chunks. 
                default: chunked
                example: chunked
          content:
            application/json:
              schema:
                oneOf: 
                  - type: object
                    description: |
                      When the value of the `stream` parameter is set to `false`, the response is as follows:
                    title: Non-streamed response
                    properties:
                      id:
                        description: |
                          Unique identifier of the response.
                        type: string
                      data:
                        description: |
                          The generated text based on the prompt you provided.
                        type: string
                  - type: object
                    title: Streamed response
                    description: |
                      When the value of the `stream` parameter is set to `true`, the platform provides a streaming response in the NDJSON format.

                      The stream contains three types of events:
                      1. Stream start
                      2. Text generation
                      3. Stream end

                      To integrate the response into your application, follow the guidelines below:
                      - Parse each line of the response as a separate JSON object.
                      - Check the `event_type` field to determine how to handle the event.
                      - For `text_generation` events, process the `text` field as it arrives. Depending on your application's requirements, this may involve displaying the text incrementally, storing it for later use, or performing any tasks.
                      - Use the `stream_start` and `stream_end` events to manage the lifecycle of your streaming session.
                    oneOf:
                      - type: object
                        title: Stream start 
                        description: |
                          Indicates the beginning of the stream.
                        properties:
                          event_type:
                            type: string
                            description: |
                              This field is always set to `stream_start` for this event.
                          metadata:
                            type: object
                            description: An object containing metadata about the stream.
                            properties:
                              generation_id:
                                type: string
                                description: |
                                  A unique identifier for the generation session.
                      - type: object
                        title: Text generation
                        description: |
                          Contains a fragment of generated text. Note that text fragments may be split at arbitrary points, not necessarily at word or sentence boundaries.
                        properties:
                          event_type:
                            type: string
                            description: |
                              This field is always set to `text_generation` for this event.
                          text:
                            type: string
                            description: |
                              A fragment of the generated text.
                      - type: object
                        title: Stream end
                        description: |
                          Indicates the end of the stream.
                        properties:
                          event_type:
                            type: string
                            description: |
                              This field is always set to `stream_end` for this event.
                          metadata:
                            type: object
                            description: An object containing metadata about the stream.
                            properties:
                              generation_id:
                                type: string
                                description: |
                                  The same unique identifier provided in the `stream_start` event.
              examples:
                non-streaming-response:
                  summary: Non-streamed response
                  value:
                    id: 2a22fd17-7bd4-446a-abd6-b9382cb18f90
                    data: '1. Vlog\n2. Minnesota\n3. Mall of America\n4. Shopping haul\n5. Outdoor adventure'
                stream-start-response:
                  summary: Stream start
                  value:
                    event_type: stream_start
                    metadata:
                      generation_id: 2f6d0bdd-aed8-47b1-8124-3c9d8006cdc9
                text-generation-resonse:
                  summary: Text generation
                  value:
                    event_type: text_generation
                    text: light-hearted moments of cats
                stream-end-response:
                  summary: Stream end
                  value:
                    event_type: stream_end
                    metadata:
                      generation_id: 2f6d0bdd-aed8-47b1-8124-3c9d8006cdc9


        '400':
          $ref: '#/components/responses/genericError' 
        '429':
          description: |
            If the rate limit is reached, the platform returns an `HTTP 429 - Too many requests` error response. The response body is empty.
            
#############################################
###   Text, image, and audio embeddings   ###
#############################################
  "/embed-new":
    post:
      summary: Create embeddings for text, image, and audio 
      description: |
        This method creates embedings for text, image, and audio. Note that you can create multiple types of embeddings in a single API call.

        Before creating an embeding, ensure that the necessary prerequisites are met: 
        - [Text embedding prerequisites](/docs/create-text-embeddings#prerequisites)
        - [Image embedding prerequisites](/create-image-embeddings#prerequisites)
        - [Audio embedding prerequisites](/create-audio-embeddings#prerequisites)

        **Common parameters**:   
        For all types of embedding, set the following parameter:
        - `engine_name`: Specify the name of the video understanding engine you want to use. Example: "Marengo-retrieval-2.6".

        **Text embeddings**:
        To create an embedding for text, provide the following parameters:
        - `text`: The text for which you want to create an embedding.
        - _(Optional)_ `text_truncate`: Specify how the platform should truncate text that exceeds 77 tokens.

        **Image embeddings**:
        To create an embedding for an image, provide the image using one of the following parameters:
        - `image_url`: A publicly accessible URL of your image file.
        - `image_file`: A local image file.
        **NOTE**: If you specify both the `image_url` and `image_file` parameters in the same request, the `image_url` parameter takes precedence over `image_file`.

        **Audio embeddings**:
        To create an embedding for an audio file, provide the audio file using one of the following parameters:
        - `audio_url`: A publicly accessible URL of your audio file.
        - `audio_file`: A local audio file.
        - _(Optional)_ `audio_truncate`: Specify how the platform should truncate the embeddings for audio files that exceed 10 seconds.
        **NOTE**: If you specify both the `audio_url` and `audio_file` parameters in the same request, the `audio_url` parameter takes precedence over `audio_file`.


      operationId: create-text-image-audio-embedding
      tags:
        - Create text, image, and audio embeddings
      requestBody:
        $ref: "#/components/requestBodies/createSyncEmbeddingRequest"
      parameters:
        - $ref: "#/components/parameters/x-api-key"
        - $ref: "#/components/parameters/multipart"
      responses:
        "200":
          $ref: "#/components/responses/createSyncEmbeddingResponse"
        "400":
          $ref: "#/components/responses/genericError"

###########################
###   Text embeddings   ###
###########################

  '/embed':
    post:
      summary: Create text embeddings
      description: |
        This endpoint creates text embeddings.
      operationId: create-text-enbedding
      tags:
        - Create text embeddings
      requestBody:
        $ref: '#/components/requestBodies/createTextEmbeddingRequest'
      parameters:
        - $ref: '#/components/parameters/x-api-key'
        - $ref: '#/components/parameters/multipart'
      responses:
        '200':
          $ref: '#/components/responses/createTextEmbeddingResponse'
        '400':
          $ref: '#/components/responses/genericError'

############################
###   Video embeddings   ###
############################

  '/embed/tasks':
    post:
      summary: Create a video embedding task
      description: |
        This method creates a new video embedding task that uploads a video to the platform and creates one or multiple video embeddings. Video embeddings are stored for seven days and are deleted after the 7-day retention period.
        
        Note the following about using this endpoint:
        - To upload a file that resides on the local file system, pass the video_file parameter.  It must be a stream of bytes encoded as `multipart/form-data`.
        - To upload a file from a publicly accessible URL, pass the `video_url` parameter with the URL of your video. It must be a string.
        - You must specify at least one of the `video_file` and `video_url` parameters. If you specify both the `video_url` and `video_file` parameters in the same request, the `video_url` parameter takes precedence over `video_file`.

        The videos for which you wish to generate embeddings must meet the following requirements:
        - **Duration**: Must be between 4 seconds and 2 hours (7,200s).
        - **File size**: Must not exceed 2 GB.
        - **Video resolution**: Must be greater or equal than 360p and less or equal than 4K.
        - **Video and audio formats**: The video files must be encoded in the video and audio formats listed on the [FFmpeg Formats Documentation](https://ffmpeg.org/ffmpeg-formats.html)  page. For videos in other formats, contact us at [support@twelvelabs.io](mailto:support@twelvelabs.io).

        **NOTE**: The platform supports uploading video files that can play without additional user interaction or custom video players. Ensure your URL points to the raw video file, not a web page containing the video. Links to third-party hosting sites, cloud storage services, or videos requiring extra steps to play are not supported.
      operationId: create-video-embeding-task
      parameters:
        - $ref: '#/components/parameters/x-api-key'
        - $ref: '#/components/parameters/multipart'
      tags:
        - Create video embeddings
      requestBody:
        $ref: '#/components/requestBodies/createVideoEmbeddingTaskRequest'
      responses:
        '200':
          $ref: '#/components/responses/createVideoEmbeddingTaskResponse'
        '400':
          $ref: '#/components/responses/genericError'

    get:
      summary: List video embedding tasks
      description: |
        This method returns a list of the video embedding tasks in your account. The API returns your video indexing tasks sorted by creation date, with the newest at the top of the list.
      operationId: list-video-embedding-tasks
      tags:
          - Create video embeddings
      parameters:
        - $ref: "#/components/parameters/x-api-key"
        - $ref: "#/components/parameters/started_at"
        - $ref: "#/components/parameters/ended_at"
        - $ref: "#/components/parameters/embedding_tasks_filter_status"
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/page_limit"
      responses:
        "200":
          $ref: "#/components/responses/listVideoEmbeddingTasksResponse"
        "400":
          $ref: "#/components/responses/genericError"
    
  '/embed/tasks/{task_id}/status':
    get:
      summary: Retrieve the status of a video embedding task
      description: |
        This method retrieves the status of a video embedding task.

        Each video embedding task represents a request to upload and create one or multiple embeddings. A task starts when you begin uploading a video by calling the [`POST`](/reference/create-video-embeding-task) method of the `/embed/task` endpoint, and can have one of the following statuses:
        - `processing`: This status indicates that the embeddings are being created.
        - `ready`: This status indicates that the platform has finished processing your video, and you can retrieve the embeddings by invoking the [`GET`](/reference/retrieve-video-embeding) method on the `/embed/tasks/{task_id} endpoint`.
        - `failed`: This status indicates that the task could not be completed as expected, and the embeddings haven't been created.
      operationId: retrieve-video-embeding-task
      parameters:
        - $ref: '#/components/parameters/x-api-key'
        - $ref: '#/components/parameters/Content-Type'
        - $ref: '#/components/parameters/video-embedding-task-id'
      tags:
        - Create video embeddings
      responses:
        '200':
          $ref: '#/components/responses/retrieveVideoEmbeddingTaskStatusResponse'
        '400':
          $ref: '#/components/responses/genericError'
    
  '/embed/tasks/{task_id}':
    get:
      summary: Retrieve video embeddings
      description: |
        This method retrieves embeddings for a specific video embedding task. Ensure the task status is `ready` before invoking this method. Refer to the [Retrieve a video embedding](/reference/retrieve-video-embeding-task) task page for instructions on checking the task status.
      operationId: retrieve-video-embeding
      parameters:
        - $ref: '#/components/parameters/x-api-key'
        - $ref: '#/components/parameters/Content-Type'
        - $ref: '#/components/parameters/video-embedding-task-id'
      tags:
        - Create video embeddings
      responses:
        '200':
          $ref: '#/components/responses/retrieveVideoEmbeddingResponse'
        '400':
          $ref: '#/components/responses/genericError'

#################################
###   Any-to-video search   ###
#################################

  '/search-v2':
    summary: Any-to-video search
    post:
      summary: Make any-to-video search requests 
      description: |
        Use this endpoint to search for relevant matches in an index using text or various media formats.
        
        To perform a search using a text query:
        - Use the `query_text` parameter to specify your query.
        
        To perform a search using a media query:
        - Set the `query_media_type` parameter to the corresponding media type (example: `image`).
        - Specify either one of the following parameters:
          - The `query_media_url` parameter with the publicly accessible URL of your media file.
          - The `query_media_file` parameter with a local media file.
          If both `query_media_url` and `query_media_file` are specified in the same request, `query_media_url` takes precedence.

        Before using a media file as a query, ensure that the file meets the [prerequisites](/docs/single-queries-prerequisites).

        **NOTE**: This endpoint is rate-limited. For details, see the [Rate limits](/docs/rate-limits) page.

      operationId: any-to-video-search 
      parameters:
        - $ref: '#/components/parameters/x-api-key'
        - $ref: '#/components/parameters/multipart'
      tags:
        - Any-to-video search
      requestBody:
        $ref: '#/components/requestBodies/any-to-video-search'
      responses:
        '200':
          $ref: '#/components/responses/searchResultsResponse'
        '400':
          $ref: '#/components/responses/genericError'
        '429':
          description: |
            If the rate limit is reached, the platform returns an `HTTP 429 - Too many requests` error response. The response body is empty.

  '/search-v2/{page-token}':
    get:
      summary: Retrieve a specific page of search results
      tags:
        - Any-to-video search
      description: |
        Use this endpoint to retrieve a specific page of search results.

        **NOTE**: When you use pagination, you will not be charged for retrieving subsequent pages of results.
      operationId: any-to-video--retrieve-specific-page
      parameters:
        - $ref: '#/components/parameters/x-api-key'
        - $ref: '#/components/parameters/Content-Type'
        - name: page-token
          in: path
          required: true
          description: |
            A token that identifies the page to retrieve.
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/searchResultsResponsePageId'
        '400':
          $ref: '#/components/responses/searchResultsError'

#######################
###   Components   ####
#######################

components:
  schemas:

    EmbeddingResponse:
      type: object
      properties:
        engine_name:
          type: string
          description: The name ofhe video understanding engine the platform has used to create this embedding.
      anyOf:
        - $ref: '#/components/schemas/AudioEmbeddingResponse'
        - $ref: '#/components/schemas/ImageEmbeddingResponse'
        - $ref: '#/components/schemas/TextEmbeddingResponse'
    
    AudioEmbeddingResponse:
      type: object
      title: Audio embedding 
      required:
        - audio_embedding
      properties:
        audio_embedding:
          $ref: '#/components/schemas/EmbeddingResult'
    
    ImageEmbeddingResponse:
      type: object
      title: Image embedding
      required:
        - image_embedding
      properties:
        image_embedding:
          $ref: '#/components/schemas/EmbeddingResult'

    TextEmbeddingResponse:
      type: object
      title: Text embedding
      required:
        - text_embedding
      properties:
        text_embedding:
          $ref: '#/components/schemas/EmbeddingResult'
          
    EmbeddingResult:
      type: object
      properties:
        error_message:
          type: string
          description: Error message if embedding generation failed.
        float:
          type: array
          items:
            type: number
            format: float
          description: An array of floating point numbers representing the embedding.
        is_success:
          type: boolean
          description: This field indicates whether the embedding generation was successful.

    end_time:
      type: number
      description: |
        The end time of the matching video clip, expressed in seconds.  

    start_time:
      type: number
      description: |
        The start time of the matching video clip, expressed in seconds.
    
    score_search_terms:
      type: string
      description: |
        A quantitative value determined by the AI engine representing the level of confidence that the results match your search terms.

    max_confidence:
      type: string
      description: |
        A qualitative indicator based on the value of the `max_score` field. This field can take one of the following values:
          - `high`
          - `medium`
          - `low`
          - `extremely low`
    confidence:
      type: string
      description: |
        A qualitative indicator based on the value of the `score` field. This field can take one of the following values:
        - `high`
        - `medium`
        - `low`
        - `extremely low`
    modules:
      type: array
      description: |
        When the request specifies multiple sources of information, this array indicates the confidence level that the result is accurate for each matching source of information.
      items:
        description: |
          Each element is a dictionary.
        type: object
        properties:
            type:
              type: string
              description: |
                The source of information for which the video clip matched your search terms. It can take one of the following values: `conversation`, `visual`,  `text_in_video`, and `logo`.
            confidence:
              type: string
              description: |
                The confidence level that the result is accurate.

    thumbnail_url:
      type: string
      description: |
        If thumbnail generation has been enabled for this index, the platform returns a string representing the URL of the thumbnail. Note that the URL expires in one hour.


    total_results:
      description: The total number of results. 
      type: integer

    page:
      description: The page you retrieved.
      type: integer

    total_page:
      type: integer
      description: The total number of pages.

    limit_per_page_simple:
      type: integer
      description: The maximum number of items on each page.

    total_inner_matches:
      type: integer 
      description: |
        When grouping by video, the platform return this field that shows the total number of video clips matching your query.

    next_page_token:
      type: string
      description: The unique identifier of the next page.

    search_pool:
      type: object
      description: An object that contains details about the index you queried.
      properties:
        total_count:
          type: integer
          description: The number of videos in the index you queried.
        total_duration:
          type: number
          description: The total duration of the videos.
        index_id:
          type: string
          description: The unique identifier of the index.

    conversation_option:
      description: |
        Specifies the type of match the platform will perform. The following values are supported: `semantic` and `exact_match`. For details, see the [Conversation option](/docs/conversation-option) page.

        **Default:** `semantic`
      default: semantic
      enum:
      - semantic
      - exact_match
      type: string

    conversation_option_any_to_video:
      description: |
        Specifies the type of match the platform performs.
          
        When using image queries:
        - This parameter must be set to `semantic`.
        
        When using text queries, supported values are:
        - `semantic`
        - `exact_match`
        For details, see the [Conversation option](/docs/conversation-option) page.

        **Default:** `semantic`
      default: semantic
      enum:
      - semantic
      - exact_match
      type: string

    include_clips:
      description: |
        When this parameter is set to `true`, the platform will return detailed information about each matching video clip.

        **Default:** false
      default: false
      type: boolean
    
    classes:
      type: array
      required:
        - name
        - prompts
      description: |
        An array of objects containing the names and the definitions of entities or actions that the platform must identify.
      items:
        $ref: '#/components/schemas/classesObject'
      minItems: 1

      
    classesObject:
      type: object
      required:
      - name
      - prompts
      properties:
        name:
          type: string
          description: A string representing the name you want to give this class. Make sure you use brief and meaningful names.
        prompts:
          description: |
            An array of strings that specifies what the class contains. The platform will classify your videos based on this array. Note that the total number of prompts you specify in a request must not exceed 100.
          example:
          - Truck
            Sedan
            SUV
            Convertible
          items:
            type: string
          minItems: 1
          maxItems: 100
          type: array
        options:
          description: |
            If set, overides the options for this class.
          items:
            enum:
            - conversation
            - text_in_video
            - visual
            type: string
          minItems: 1
          type: array
        conversation_option:
          description: |
            If set, overides the conversation option for this class.
          default: semantic
          enum:
          - semantic
          - exact_match
          type: string


    labels:
      description: |
        An array of objects containing the names and the definitions of entities or actions that the platform must identify.
      items:
        $ref: '#/components/schemas/classifyLabel'
      minItems: 1
      type: array

    options:
      description: |
        An array that specifies the sources of information the platform uses when it categorizes a video. For details, see the [Search options](/docs/search-options) page.
      items:
        enum:
        - conversation
        - text_in_video
        - visual
        - logo
        type: string
      minItems: 1
      type: array

    options_classify:
      description: |
        An array that specifies the sources of information the platform uses when it categorizes a video. For details, see the [Search options](/docs/search-options) page.
      items:
        enum:
        - conversation
        - text_in_video
        - visual
        type: string
      minItems: 1
      type: array

    threshold:
      description: |
        Use this parameter to filter on the level of confidence that the results match your labels.

        **Default:** `low`
      default: low
      enum:
      - high
      - medium
      - low
      - none
      type: string
    
    threshold_search:
      description: |
        Use this parameter to filter on the level of confidence that the results match your query.

        **Default:** `low`
      default: low
      enum:
      - high
      - medium
      - low
      - none
      type: string

    thresholdClassifyNew:
      description: |
        Use this parameter to filter on the level of confidence that the results match your prompts.

        **Min**: 0
        **Max**: 100
        **Default:** 75
      default: 75
      type: integer

    classifyPageInfo:
      properties:
        page_expired_at:
          type: string
          description: |
            A string representing the date and time, in the <a href="https://datatracker.ietf.org/doc/html/rfc3339" target="_blank">RFC 3339</a> format ("YYYY-MM-DDTHH:mm:ssZ"), that the page expires.
        limit_per_page:
          $ref: '#/components/schemas/limit_per_page_simple'
        next_page_token:
          $ref: '#/components/schemas/next_page_token' 
        prev_page_token:
          type: string
          description: |
            The unique identifier of the previous page. If this is the first page, the API returns an empty string.
        total_results:
          $ref: '#/components/schemas/total_results' 
      type: object

    classifyLabel:
      type: object
      required:
      - name
      - prompts
      properties:
        name:
          description: A string representing the name you want to give this label.
          example: Car Shapes
          type: string
        prompts:
          description: |
            An array of strings that specifies what the label contains.
          example:
          - Truck
            Sedan
            SUV
            Convertible
          items:
            type: string
          minItems: 1
          type: array



    classifyLabelResult:
      description: |
        An array containing information about the video clips that match the the prompts you've specified.
      properties:
        classes: 
          description: |
            An array of objects containing information about each of the matching video clips. This field is included in the response only when you set the value of the `include_clips` parameter to `true`.
          items:
            $ref: "#/components/schemas/classifyClip"
          type: array

        confidence:
          $ref: '#/components/schemas/max_confidence'
        duration:
          description: The total duration of the matching video clips.
          type: number
        max_score:
          description: |
            When classifying a video, the platform finds all video clips that match the label you've specified in the request. For each video clip found, the platform determines the level of confidence that the clip matches the label. The `max_score` field is determined by comparing the confidence scores of each clip and selecting the highest one.
          type: number
        name:
          description: The name of the label.
          type: string



    classifyClip:
      name: clasifyClip
      description: An array containing information about the video clips that match the label you've specified.
      properties:
        confidence:
          $ref: '#/components/schemas/confidence'
        end:
          $ref: '#/components/schemas/end_time'
        score:
          type: number
          description: |
            A number indicating the confidence level that the video clips match the specified class.
        option:
          type: string
          description: Indicates the type of search the platform performed.
        prompt:
          type: string
          description: Indicates the prompt that the platform used.
        start:
          $ref: '#/components/schemas/start_time'
        thumbnail_url:
          $ref: '#/components/schemas/thumbnail_url'
      type: object

    engine:
      description: 'Engine object'
      title: Engine
      type: object
      properties:
        _id:
          type: string
          description: |
            A string representing the identifier of the engine.
        allowed_engine_options:
          type: array
          description: |
            An array of strings representing the supported engine options for each engine. For details, see the [Engine options](/docs/engine-options) page.
          items:
            type: string
        author:
          type: string
          description: |
            A string indicating who created the index.
        created_at:
          type: string
          description: |
            A string representing the date and time, in the <a href="https://datatracker.ietf.org/doc/html/rfc3339" target="_blank">RFC 3339</a> format ("YYYY-MM-DDTHH:mm:ssZ"), that the engine was created.
        updated_at:
          type: string
          description: |
            A string representing the date and time, in the <a href="https://datatracker.ietf.org/doc/html/rfc3339" target="_blank">RFC 3339</a> format ("YYYY-MM-DDTHH:mm:ssZ"), that the engine was updated.
        finetune:
          type: boolean
          description: |
            A boolean indicating whether this engine supports fine-tunning.
        ready:
          type: boolean
          description: A boolean specifying whether this engine is ready to be used.
      example:
        id: marengo2.6
        created_at: '2023-04-12 11:49:26.663 +0000 UTC'
        updated_at: '2023-04-12 11:49:26.663 +0000 UTC'
        allowed_index_options:
          - visual
          - text_in_video
          - conversation
          - logo
        author: twelve_labs
        finetune: false
        ready: true

    index:
      title: Index
      description: |
        An index groups one or more videos stored as vectors and is the most granular level at which you can perform a search.
      type: object
      properties:
        _id:
          type: string
          description: A string representing the unique identifier of the index. It is assigned by the API when an index is created.
        created_at:
          type: string
          description: A string representing the date and time, in the <a href="https://datatracker.ietf.org/doc/html/rfc3339" target="_blank">RFC 3339</a> format ("YYYY-MM-DDTHH:mm:ssZ"), that the index was created.
        updated_at:
          type: string
          description: A string representing the date and time, in the <a href="https://datatracker.ietf.org/doc/html/rfc3339" target="_blank">RFC 3339</a> format ("YYYY-MM-DDTHH:mm:ssZ"), that the index has been updated.
        expires_at:
          type: string
          description: |
            A string representing the date and time, in the <a href="https://datatracker.ietf.org/doc/html/rfc3339" target="_blank">RFC 3339</a> format ("YYYY-MM-DDTHH:mm:ssZ"), when your index will expire.

            If you're on the Free plan, the platform retains your index data for 90 days from creation. After this period, the platform deletes your index data, and this action cannot be undone. To continue using your index beyond this period, consider upgrading to the Developer plan, which offers unlimited index retention. For details, see the [Upgrade your plan](/docs/manage-your-plan#upgrade-your-plan) section.

            If you're on the Developer plan, this field is set to `null`, indicating no expiration.
        index_name:
          type: string
          description: A string representing the name of the index.
        total_duration:
          type: number
          description: A number representing the total duration, in seconds, of the videos in the index.
        video_count:
          type: number
          description: The number of videos uploaded to this index.
        engines:
          type: array
          description: An array containing the list of the [video understanding engines](/docs/video-understanding-engines) enabled for this index.
          items:
            type: object
            properties:
              engine_name:
                type: string
                description: A string representing the name of the engine.
              engine_options:
                type: array
                description: |
                  An array of strings that contains the [engine options](/docs/engine-options) enabled for this index.
                items:
                  type: string
              addons:
                type: array
                description: The list of the add-ons that are enabled for this index.
                items:
                  type: string

    videoEmbeddingTask:
      title: Video Embedding Task
      type: object
      properties:
        _id:
          type: string
          description: |
            The unique identifier of the video embedding task.
        engine_name:
          type: string
          description: |
            The name of the engine the platform uses to create the embeddings.
        status:
          type: string
          description: |
            A string indicating the status of the video indexing task. It can take one of the following values: `processing`, `ready` or `failed`.
        video_embeddings:
          type: array
          description: |
            An array of objects containing your embeddings.
          items:
            type: object
            description: |
              Each object corresponds to an embedding and has the following fields:
            properties:
              start_offset_sec:
                type: number
                format: float
                description: |
                  The start time of the video segment for this embedding. If the embedding scope is `video`, this field equals `0`.
              end_offset_sec:
                type: number
                format: float
                description: |
                  The end time of the video segment for this embedding. If the embedding scope is `video`, this field equals the duration of the video.
              embedding_scope:
                type: string
                description: |
                  Indicates the scope of this embedding. It can take the following values:
                  - `video`: Indicates that this embedding if for the entire video.
                  - `clip`: Indicates that this embedding is for a specific segment.
              embedding:
                description: |
                  An object that contains a field named `float` which represents the embedding. 
                type: object
                properties:
                  float:
                    description: |
                      An array of floating point numbers representing the embedding. Note that the example response was truncated for brevity.
                    type: array
                    items:
                      type: number
                      format: float
        metadata:
          type: object
          description: |
            An object containing metadata about the video.
          properties:
            video_filename:
              type: string
              description: |
                The name of the video file. The platform returns this field when you upload a video from your local file system.
            video_url:
              type: string
              description: |
                The URL of the video. The platform returns this field when you upload a video  from a publicly accessible URL.
            video_clip_length:
              type: number
              description:  The duration for each clip in seconds, as specified by the `video_clip_length` parameter of the [`POST`](/reference/create-video-embeding-task) method of the `/embed/task` endpoint. Note that the platform automatically truncates video segments shorter than 2 seconds. For a 31-second video divided into 6-second segments, the final 1-second segment will be truncated. This truncation only applies to the last segment if it does not meet the minimum length requirement of 2 seconds.
            video_embedding_scope:
              type: array
              description: |
                The scope of the video embedding. It can contain one or both of the following values: `clip` and `video`.
              items:
                type: string
                enum: [clip, video]
            duration:
              type: number
              format: float
              description: The total duration of the video in seconds. 

    videoIndexingTask:
      title: Video Indexing Task
      type: object
      properties:
        _id:
          type: string
          description: |
            A string representing the unique identifier of the task. It is assigned by the platform when a new task is created.
        created_at:
          type: string
          description: 'A string indicating the date and time, in the RFC [RFC 3339](https://datatracker.ietf.org/doc/html/rfc3339) format ("YYYY-MM-DDTHH:mm:ssZ"), that the task was created.'
        updated_at:
          type: string
          description: |
            A string indicating the date and time, in the RFC [RFC 3339](https://datatracker.ietf.org/doc/html/rfc3339) format ("YYYY-MM-DDTHH:mm:ssZ"), that the task object was last updated. The platform updates this field every time the video indexing task transitions to a different state.
        status:
          type: string
          description: A string indicating the status of the video indexing task. See the [Tasks](/reference/tasks) page for a list of possible statuses.
        estimated_time:
          type: string
          description: |
            A string indicating the estimated completion date and time of the video indexing task, in the [RFC 3339](https://datatracker.ietf.org/doc/html/rfc3339) format ("YYYY-MM-DDTHH:mm:ssZ").
        index_id:
          type: string
          description: |
            A string representing the unique identifier of the index to which the video must be uploaded.
        metadata:
          type: object
          description: |
            An object that contains information about the video.
          properties:
            duration:
              type: number
            filename:
              type: string
            height:
              type: integer
            width:
              type: integer
      example:
        _id: 62a17bf847f5678267ec10cc
        created_at: 2022-06-09T04:50:00.879Z
        updated_at: 2022-06-09T04:55:57.256Z
        status: ready
        estimated_time: 2022-06-09T04:55:53.746Z
        index_id: 630aff993fcee0532cb809d0
        metadata:
          duration: 531.998133
          filename: 01.mp4
          height: 480
          width: 854

    videoVector:
      type: object
      title: Video Vector
      properties:
        _id:
          type: string
          description: |
            A string representing the unique identifier of a video. The platform creates a new `video_vector` object and assigns it a unique identifier when the video has successfully been indexed. Note that video IDs are different from task IDs.
        created_at:
          type: string
          description: |
            A string indicating the date and time, in the RFC [RFC 3339](https://datatracker.ietf.org/doc/html/rfc3339) format ("YYYY-MM-DDTHH:mm:ssZ"), that the video indexing task was created.
        updated_at:
          type: string
          description: |
            A string indicating the date and time, in the RFC [RFC 3339](https://datatracker.ietf.org/doc/html/rfc3339) format ("YYYY-MM-DDTHH:mm:ssZ"), that the video indexing task object was last updated. The platform updates this field every time the video indexing task transitions to a different state.
        indexed_at:
          type: string
          description: |
            A string indicating the date and time, in the RFC [RFC 3339](https://datatracker.ietf.org/doc/html/rfc3339) format ("YYYY-MM-DDTHH:mm:ssZ"), that the video indexing task has been completed.
        metadata:
          type: object
          description: |
            An object that contains information about the video.
          properties:
            filename:
              type: string
              example: 01.mp4
            duration:
              type: number
            fps:
              type: number
            width:
              type: integer
            height:
              type: integer
            size:
              type: number
      example:
        _id: 62bac61c154f59c87660cea3
        created_at: 2022-06-28T09:12:54
        updated_at: 2022-06-28T09:13:00Z
        indexed_at: 2022-06-28T09:26:42Z
        metadata:
          filename: 01.mp4
          duration: 741.875
          fps: 741.875
          width: 640
          height: 360
          size: 65749715


######################
###   Parameters   ###
######################

  parameters:
    video-embedding-task-id:
      name: task_id
      in: path
      description: |
        The unique identifier of your video embedding task.
      required: true
      schema:
        type: string

    Content-Type:
      name: Content-Type
      in: header
      description: Must be set to `application/json`.
      required: true
      schema:
        type: string
        default: application/json
    x-api-key:
      name: x-api-key
      in: header
      description: |
        Your API key.
        
        **NOTE:** You can find your API key on the <a href="https://playground.twelvelabs.io/dashboard/api-key" target="_blank">API Key</a> page.
      required: true
      schema:
        type: string
    multipart:
      name: Content-Type
      in: header
      description: Must be set to `multipart/form-data`.
      required: true
      schema:
        type: string
        default: multipart/form-data
    page:
      name: page
      in: query
      description: |
        A number that identifies the page to retrieve.

        **Default**: `1`.
      schema:
        type: integer
        default: 1
      required: false
    page_limit:
      name: page_limit
      in: query
      description: |
        The number of items to return on each page.
        
        **Default**: `10`.
        **Max**: `50`.
      schema:
        type: integer
        default: 10
      required: false
    sort_by:
      name: sort_by
      in: query
      description: |
        The field to sort on. The following options are available:
        - `updated_at`: Sorts by the time, in the <a href="https://datatracker.ietf.org/doc/html/rfc3339" target="_blank">RFC 3339</a> format ("YYYY-MM-DDTHH:mm:ssZ"), when the item was updated.
        - `created_at`: Sorts by the time, in the <a href="https://datatracker.ietf.org/doc/html/rfc3339" target="_blank">RFC 3339</a> format ("YYYY-MM-DDTHH:mm:ssZ"), when the item was created.

        **Default**: `created_at`.
      schema:
        type: string
        default: created_at
      required: false
    sort_option:
      name: sort_option
      in: query
      description: |
        The sorting direction. The following options are available:
        - `asc` 
        - `desc`

        **Default**: `desc`.
      schema:
        type: string
        default: desc
      required: false
    _id:
      name: _id
      in: query
      description: |
        Filter by the unique identifier of a video indexing task. 
      schema:
        type: string
      required: false
    index_id:
      name: index_id
      in: query
      description: |
        Filter by the unique identifier of an index.
      schema:
        type: string
      required: false
    filename:
      name: filename
      in: query
      description: |
        Filter by filename.
      schema:
        type: string
      required: false
    duration:
      name: duration
      in: query
      description: |
        Filter by duration. Expressed in seconds.
      schema:
        type: number
      required: false
    width:
      name: width
      in: query
      description: |
        Filter by width.
      schema:
        type: integer 
      required: false
    height:
      name: height
      in: query
      description: |
        Filter by height.
      schema:
        type: integer
      required: false
    created_at:
      name: created_at
      in: query
      description: |
        Filter video indexing tasks by the creation date and time, in the [RFC 3339](https://datatracker.ietf.org/doc/html/rfc3339) format ("YYYY-MM-DDTHH:mm:ssZ"). The platform returns the video indexing tasks that were created on the specified date at or after the given time.
      schema:
        type: string
      required: false
    updated_at:
      name: updated_at
      in: query
      description: |
        Filter video indexing tasks by the last update date and time, in the [RFC 3339](https://datatracker.ietf.org/doc/html/rfc3339) format ("YYYY-MM-DDTHH:mm:ssZ"). The platform returns the video indexing tasks that were updated on the specified date at or after the given time.
      schema:
        type: string
      required: false
    estimated_time:
      name: estimated_time
      in: query
      description: |
        Filter video indexing tasks by the estimated completion date and time, in the [RFC 3339](https://datatracker.ietf.org/doc/html/rfc3339) format ("YYYY-MM-DDTHH:mm:ssZ"). The platform returns the video indexing tasks estimated to be completed on the specified date at or after the given time.
      schema:
        type: string
      required: false

    ended_at:
      name: ended_at
      description: |
        Retrieve the video embedding tasks created after a specific time. When specifying the time, use the [RFC 3339](https://datatracker.ietf.org/doc/html/rfc3339) format ("YYYY-MM-DDTHH:mm:ssZ"). 
      in: query
      schema:
        type: string
      required: false
    started_at:
      name: started_at
      description: |
        Retrieve the video embedding tasks created after a specific time. When specifying the time, use the  [RFC 3339](https://datatracker.ietf.org/doc/html/rfc3339) format ("YYYY-MM-DDTHH:mm:ssZ").
      in: query
      schema:
        type: string
      required: false
    embedding_tasks_filter_status:
      name: status
      description: Filter video embedding tasks by their current status. Possible values are `processing`, `ready`, or `failed`.
      in: query
      schema:
        type: string
      required: false

#####################
###   Responses   ###
#####################

  responses:

    searchResultsResponsePageId:
      description: Successfully retrieved the specified page of search results.
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                description: An array that contains your search results. For each match found, the engine returns the following fields.
                items:
                  type: object
                  properties:
                    score:
                      $ref: '#/components/schemas/score_search_terms'
                    start:
                      $ref: '#/components/schemas/start_time'
                    end:
                      $ref: '#/components/schemas/end_time'
                    video_id:
                      type: string
                      description: A string representing the unique identifier of the video. Once the platform indexes a video, it assigns a unique identifier. Note that this is different from the identifier of the video indexing task.
                    metadata:
                      type: array
                      description: |
                        An array of objects where each object contains details about a specific type of match and has the following fields:
                      items:
                        type: object
                        properties:
                          type:
                            type: string
                            description: A string that indicates the type of match (`visual`, `conversation`, `text_in_video`, or `logo`).
                          text:
                            type: string
                            description: For `conversation` and `text_in_video`, the API returns a transcription of the spoken words or the text that matches your search query.
                    confidence:
                      $ref: '#/components/schemas/confidence'
                    thumbnail_url:
                      $ref: '#/components/schemas/thumbnail_url'
                    modules:
                      $ref: '#/components/schemas/modules'
              page_info:
                type: object
                description: An object that provides information about pagination.
                properties:
                  limit_per_page:
                    type: integer
                    description: |
                      The maximum number of items on each page. When grouping by video, this field represents the maximum number of videos per page. Otherwise, it represents the maximum number of video clips per page. 
                  page_expired_at:
                    type: string
                    description: |
                      A string representing the date and time, in the <a href="https://datatracker.ietf.org/doc/html/rfc3339" target="_blank">RFC 3339</a> format ("YYYY-MM-DDTHH:mm:ssZ"), that the page expires.
                  total_results:
                    type: integer
                    description: |
                      The total number of results. When grouping by video, this field represents the total number of video clips matching your query. Otherwise , this field represents the total number of videos.
                  total_inner_matches:
                    $ref: '#/components/schemas/total_inner_matches'
                  next_page_token:
                    $ref: '#/components/schemas/next_page_token'
                  prev_page_token:
                    type: string
                    description: The unique identifier of the previous page.
              search_pool:
                $ref: '#/components/schemas/search_pool'
          example:
            search_pool:
              total_count: 13
              total_duration: 8731
              index_id: 639961c9e219c90227c371a2
            data:
            - score: 85.08
              start: 515.4375
              end: 527
              metadata:
              - type: visual
              video_id: 639963a1ce36463e0199c8c7
              confidence: high
              thumbnail_url: https://project-one-thumbnail.s3.us-west-2.amazonaws.com/639963a1ce36463e0199c8c7/516.jpeg?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAYRWJPOVHXE5SJ77T%2F20221222%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20221222T134944Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&x-id=GetObject&X-Amz-Signature=9e991f972f8a1baa647d7460685d99e20c4a27408406a972a4baf173a10b0102
              modules:
              - type: visual
                confidence: high
            - score: 85.05
              start: 11.5125
              end: 23.140625
              metadata:
              - type: visual
              video_id: 639963a1ce36463e0199c8c7
              confidence: high
              thumbnail_url: https://project-one-thumbnail.s3.us-west-2.amazonaws.com/639963a1ce36463e0199c8c7/12.jpeg?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAYRWJPOVHXE5SJ77T%2F20221222%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20221222T134944Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&x-id=GetObject&X-Amz-Signature=cd6b29e8723d51f71823dbd01c8edd252e49a8b231aca218f844e745e6b4e83a
              modules:
              - type: visual
                confidence: high
            - score: 85.05
              start: 763.7708333333334
              end: 782.0625
              metadata:
              - type: visual
              video_id: 6399637ace36463e0199c8c6
              confidence: high
              thumbnail_url: https://project-one-thumbnail.s3.us-west-2.amazonaws.com/6399637ace36463e0199c8c6/764.jpeg?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAYRWJPOVHXE5SJ77T%2F20221222%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20221222T134944Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&x-id=GetObject&X-Amz-Signature=4cb4392044330b76bca5e6b167ef4c3b9e04a3bcc0ca5e1af188005edbca21b7
              modules:
              - type: visual
                confidence: high
            - score: 84.95
              start: 252.2421875
              end: 278.15625
              metadata:
              - type: visual
              video_id: 6399637ace36463e0199c8c6
              confidence: high
              thumbnail_url: https://project-one-thumbnail.s3.us-west-2.amazonaws.com/6399637ace36463e0199c8c6/253.jpeg?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAYRWJPOVHXE5SJ77T%2F20221222%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20221222T134943Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&x-id=GetObject&X-Amz-Signature=75ddcff5ed8f14d400e21cb211440edc986a6d0320e4538a7ab2d1df4918ea43
              modules:
              - type: visual
                confidence: high
            - score: 84.95
              start: 293.75
              end: 302.47499999999997
              metadata:
              - type: visual
              video_id: 639963a1ce36463e0199c8c7
              confidence: high
              thumbnail_url: https://project-one-thumbnail.s3.us-west-2.amazonaws.com/639963a1ce36463e0199c8c7/294.jpeg?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAYRWJPOVHXE5SJ77T%2F20221222%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20221222T134944Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&x-id=GetObject&X-Amz-Signature=0a0882611208dbbdc836090426c95deb422c34ed41a3cb0ed56b78227c51c243
              modules:
              - type: visual
                confidence: high
            page_info:
              limit_per_page: 10
              total_results: 195
              page_expired_at: '2022-12-22T13:49:44Z'
              next_page_token: cdfb7ca8-9316-4518-af82-8cadbe934474-2
              prev_page_token: cdfb7ca8-9316-4518-af82-8cadbe934474-0
            type: search_create_token


    noContentResponse:
      description: If successful, this method returns a `204 No Content` response code. It does not return anything in the response body.


    combinedSearchResultsResponse:
      description: Successfully performed a search request.
      headers:
        X-Ratelimit-Limit:
          schema:
            type: number
          description: The maximum number of requests you can make per rate limit window for this endpoint. For details, see the [Rate limits](/docs/rate-limits) page.
          example: 100
        X-Ratelimit-Remaining:
          schema:
            type: number
          description: The number of requests remaining in the current rate limit window for the specific endpoint. This value decreases with each request you make to that endpoint and resets at the start of the next rate limit window.
          example: 99
        X-Ratelimit-Used:
          schema:
            type: number
          description: The number of requests you have made in the current rate limit window for the specific endpoint. This value increases with each request you make to that endpoint and resets to zero at the start of the next rate limit window.
          example: 1
        X-Ratelimit-Reset:
          schema:
            type: number
          description: The time at which the current rate limit window resets, expressed in UTC epoch seconds. After this time, the values of the `X-Ratelimit-Remaining` and `X-Ratelimit-Used` parameters will be reset to their initial values for the next rate limit window.
          example: 1718777276
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                description: |
                  An array of objects that contains your search results.
                items:
                  type: object
                  properties:
                    score:
                      $ref: '#/components/schemas/score_search_terms'
                    start:
                      $ref: '#/components/schemas/start_time'
                    end:
                      $ref: '#/components/schemas/end_time'
                    video_id:
                      type: string
                      description: |
                        A string representing the unique identifier of the video. Once the platform indexes a video, it assigns a unique identifier. Note that this is different from the identifier of the video indexing task.
                    confidence:
                      $ref: '#/components/schemas/confidence'
                    thumbnail_url:
                      $ref: '#/components/schemas/thumbnail_url'
              page_info:
                type: object
                description: An object that provides information about pagination.
                properties:
                  limit_per_page:
                    $ref: '#/components/schemas/limit_per_page_simple'
                  page_expired_at:
                    type: string
                    description: A string representing the date and time, in the <a href="https://datatracker.ietf.org/doc/html/rfc3339" target="_blank">RFC 3339</a> format ("YYYY-MM-DDTHH:mm:ssZ"), that the page expires.
                  total_results:
                    $ref: '#/components/schemas/total_results'
                  next_page_token:
                    $ref: '#/components/schemas/next_page_token'
              search_pool:
                $ref: '#/components/schemas/search_pool'
          example:
            search_pool:
              total_count: 11
              total_duration: 7519
              index_id: 639961c9e219c90227c371a2
            data:
              - score: 86.69
                start: 139
                end: 160
                video_id: 63996260ce36463e0199c8c5
                confidence: high
                thumbnail_url: https://project-one-thumbnail.s3.us-west-2.amazonaws.com/63996260ce36463e0199c8c5/140.jpeg?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAYRWJPOVHXE5SJ77T%2F20221218%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20221218T072553Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&x-id=GetObject&X-Amz-Signature=e0e7e498b28837c94acc44404ebe7c050efde38e26c66d00e8db33182b37ab76
              - score: 86.17
                start: 173
                end: 190
                video_id: 63996260ce36463e0199c8c5
                confidence: high
                thumbnail_url: https://project-one-thumbnail.s3.us-west-2.amazonaws.com/63996260ce36463e0199c8c5/174.jpeg?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAYRWJPOVHXE5SJ77T%2F20221218%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20221218T072553Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&x-id=GetObject&X-Amz-Signature=340e1e908070cafd12c0f63d09dcecb3bf6caebbf0753829a2da820219f56c12
              - score: 86.14
                start: 520
                end: 667
                video_id: 63996246ce36463e0199c8c4
                confidence: high
                thumbnail_url: https://project-one-thumbnail.s3.us-west-2.amazonaws.com/63996246ce36463e0199c8c4/521.jpeg?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAYRWJPOVHXE5SJ77T%2F20221218%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20221218T072553Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&x-id=GetObject&X-Amz-Signature=8ca5247b030f403068762f959d0c9ca55d24cbab927d27217d21c708d44f4c25
            page_info:
              limit_per_page: 5
              total_results: 859
              page_expired_at: 2022-12-18T07:25:53Z
              next_page_token: 4849bbc1-0f10-4ab1-9f10-9cfaf6e62311-1


    combinedSearchSpecificPageResultsResponse:
      description: Successfully performed a search request.
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                description: |
                  An array of objects that contains your search results.
                items:
                  type: object
                  properties:
                    score:
                      $ref: '#/components/schemas/score_search_terms'
                    start:
                      $ref: '#/components/schemas/start_time'
                    end:
                      $ref: '#/components/schemas/end_time'
                    video_id:
                      type: string
                      description: |
                        A string representing the unique identifier of the video. Once the platform indexes a video, it assigns a unique identifier. Note that this is different from the identifier of the video indexing task.
                    confidence:
                      $ref: '#/components/schemas/confidence'
                    thumbnail_url:
                      $ref: '#/components/schemas/thumbnail_url'
              page_info:
                type: object
                description: An object that provides information about pagination.
                properties:
                  limit_per_page:
                    $ref: '#/components/schemas/limit_per_page_simple'
                  page_expired_at:
                    type: string
                    description: A string representing the date and time, in the <a href="https://datatracker.ietf.org/doc/html/rfc3339" target="_blank">RFC 3339</a> format ("YYYY-MM-DDTHH:mm:ssZ"), that the page expires.
                  total_results:
                    $ref: '#/components/schemas/total_results'
                  next_page_token:
                    $ref: '#/components/schemas/next_page_token'
              search_pool:
                $ref: '#/components/schemas/search_pool'
          example:
            search_pool:
              total_count: 11
              total_duration: 7519
              index_id: 639961c9e219c90227c371a2
            data:
              - score: 86.69
                start: 139
                end: 160
                video_id: 63996260ce36463e0199c8c5
                confidence: high
                thumbnail_url: https://project-one-thumbnail.s3.us-west-2.amazonaws.com/63996260ce36463e0199c8c5/140.jpeg?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAYRWJPOVHXE5SJ77T%2F20221218%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20221218T072553Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&x-id=GetObject&X-Amz-Signature=e0e7e498b28837c94acc44404ebe7c050efde38e26c66d00e8db33182b37ab76
              - score: 86.17
                start: 173
                end: 190
                video_id: 63996260ce36463e0199c8c5
                confidence: high
                thumbnail_url: https://project-one-thumbnail.s3.us-west-2.amazonaws.com/63996260ce36463e0199c8c5/174.jpeg?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAYRWJPOVHXE5SJ77T%2F20221218%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20221218T072553Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&x-id=GetObject&X-Amz-Signature=340e1e908070cafd12c0f63d09dcecb3bf6caebbf0753829a2da820219f56c12
              - score: 86.14
                start: 520
                end: 667
                video_id: 63996246ce36463e0199c8c4
                confidence: high
                thumbnail_url: https://project-one-thumbnail.s3.us-west-2.amazonaws.com/63996246ce36463e0199c8c4/521.jpeg?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAYRWJPOVHXE5SJ77T%2F20221218%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20221218T072553Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&x-id=GetObject&X-Amz-Signature=8ca5247b030f403068762f959d0c9ca55d24cbab927d27217d21c708d44f4c25
            page_info:
              limit_per_page: 5
              total_results: 859
              page_expired_at: 2022-12-18T12:34:24Z
              next_page_token: 3d1aea54-feba-4cee-a308-48c24c241427-2
              prev_page_token: 3d1aea54-feba-4cee-a308-48c24c241427-0


    searchResultsResponse:
      description: Successfully performed a search request.
      headers:
        X-Ratelimit-Limit:
          schema:
            type: number
          description: The maximum number of requests you can make per rate limit window for this endpoint. For details, see the [Rate limits](/docs/rate-limits) page.
          example: 100
        X-Ratelimit-Remaining:
          schema:
            type: number
          description: The number of requests remaining in the current rate limit window for the specific endpoint. This value decreases with each request you make to that endpoint and resets at the start of the next rate limit window.
          example: 99
        X-Ratelimit-Used:
          schema:
            type: number
          description: The number of requests you have made in the current rate limit window for the specific endpoint. This value increases with each request you make to that endpoint and resets to zero at the start of the next rate limit window.
          example: 1
        X-Ratelimit-Reset:
          schema:
            type: number
          description: The time at which the current rate limit window resets, expressed in UTC epoch seconds. After this time, the values of the `X-Ratelimit-Remaining` and `X-Ratelimit-Used` parameters will be reset to their initial values for the next rate limit window.
          example: 1718777276
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                description: |
                  An array that contains your search results. For each match found, the engine returns the following fields:
                items:
                  type: object
                  properties:
                    score:
                      $ref: '#/components/schemas/score_search_terms'
                    start:
                      $ref: '#/components/schemas/start_time'
                    end:
                      $ref: '#/components/schemas/end_time'
                    video_id:
                      type: string
                      description: A string representing the unique identifier of the video. Once the platform indexes a video, it assigns a unique identifier. Note that this is different from the identifier of the video indexing task.
                    metadata:
                      type: array
                      description: |
                        An array of objects where each object contains details about a specific type of match and has the following fields:
                      items:
                        type: object
                        properties:
                          type:
                            type: string
                            description: A string that indicates the type of match (`visual`, `conversation`, `text_in_video`, or `logo`).
                          text:
                            type: string
                            description: For `conversation` and `text_in_video`, the API returns a transcription of the spoken words or the text that matches your search query.
                    confidence:
                      $ref: '#/components/schemas/confidence'
                    thumbnail_url:
                      $ref: '#/components/schemas/thumbnail_url'
                    modules:
                      $ref: '#/components/schemas/modules'
              page_info:
                type: object
                description: An object that provides information about pagination.
                properties:
                  limit_per_page:
                    type: integer
                    description: |
                      The maximum number of items on each page. When grouping by video, this field represents the maximum number of videos per page. Otherwise, it represents the maximum number of video clips per page.
                  page_expired_at:
                    type: string
                    description: A string representing the date and time, in the <a href="https://datatracker.ietf.org/doc/html/rfc3339" target="_blank">RFC 3339</a> format ("YYYY-MM-DDTHH:mm:ssZ"), that the page expires.
                  total_results:
                    type: integer
                    description: |
                      The total number of results. When grouping by video, this field represents the total number of video clips matching your query. Otherwise , this field represents the total number of videos. 
                  total_inner_matches:
                    $ref: '#/components/schemas/total_inner_matches'
                  next_page_token:
                    $ref: '#/components/schemas/next_page_token'
              search_pool:
                $ref: '#/components/schemas/search_pool'
          example:
            search_pool:
              total_count: 13
              total_duration: 8731
              index_id: 639961c9e219c90227c371a2
            data:
            - score: 85.75
              start: 238.75
              end: 259.62109375
              metadata:
              - type: visual
              video_id: 639963a1ce36463e0199c8c7
              confidence: high
              thumbnail_url: https://project-one-thumbnail.s3.us-west-2.amazonaws.com/639963a1ce36463e0199c8c7/239.jpeg?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAYRWJPOVHXE5SJ77T%2F20221222%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20221222T134403Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&x-id=GetObject&X-Amz-Signature=ded5986fa30922e264a1e5fd64d1d0e216778d204645b2fdfb2cea765d297d5c
              modules:
              - type: visual
                confidence: high
            - score: 85.7
              start: 392.58125
              end: 410.5
              metadata:
              - type: visual
              video_id: 639963a1ce36463e0199c8c7
              confidence: high
              thumbnail_url: https://project-one-thumbnail.s3.us-west-2.amazonaws.com/639963a1ce36463e0199c8c7/393.jpeg?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAYRWJPOVHXE5SJ77T%2F20221222%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20221222T134403Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&x-id=GetObject&X-Amz-Signature=bd143ac27f13e7024191ae793b5ab8a1decde47d889d157e84d7be11083a64d3
              modules:
              - type: visual
                confidence: high
            - score: 85.65
              start: 50.21875
              end: 64.34375
              metadata:
              - type: visual
              video_id: 639963a1ce36463e0199c8c7
              confidence: high
              thumbnail_url: https://project-one-thumbnail.s3.us-west-2.amazonaws.com/639963a1ce36463e0199c8c7/51.jpeg?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAYRWJPOVHXE5SJ77T%2F20221222%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20221222T134403Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&x-id=GetObject&X-Amz-Signature=2cff1948607cf211a88a90dfbbe01963bab9e71a8f3e20ab8893031cc986634e
              modules:
              - type: visual
                confidence: high
            - score: 85.57
              start: 0
              end: 10.46875
              metadata:
              - type: visual
              video_id: 6399637ace36463e0199c8c6
              confidence: high
              thumbnail_url: https://project-one-thumbnail.s3.us-west-2.amazonaws.com/6399637ace36463e0199c8c6/1.jpeg?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAYRWJPOVHXE5SJ77T%2F20221222%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20221222T134403Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&x-id=GetObject&X-Amz-Signature=d1db854a0ed064860dba6bf2b4e2296e058c75b92d66a357b8894ff268756966
              modules:
              - type: visual
                confidence: high
            page_info:
              limit_per_page: 10
              total_results: 195
              page_expired_at: '2022-12-22T13:44:03Z'
              next_page_token: b84a9a99-e1af-4927-9faa-fdde8c555d38-1

    retrieveTranscriptionResponse:
      description: Transcription has successfully been retrieved.
      content:
        application/json:
          schema:
            properties:
              id:
                type: string
                description: The unique identifier of the video.
              data:
                type: array
                description: An array of objects that contains the transcription. For each time range for which the platform finds spoken words, it returns an object that contains the fields below. If the platform doesn't find any spoken words, the `data` field is set to `None`.
                items:
                  type: object
                  properties:
                    start:
                      type: number
                      description: The start of the time range, expressed in seconds.
                    end:
                      type: number
                      description: The end of the time range, expressed in seconds.
                    value:
                      type: string
                      description: Text representing the spoken words within this time range.
              index_id:
                type: string
                description: The unique identifier of the index to which the video has been uploaded.
          example:
            id: 61e17c1c777e6caec646fa08
            data:
              - end: 8.86
                start: 4.34
                value: 'Hello?'
              - end: 10.95
                start: 9.56
                value: ' Yeah,'
            index_id: 61e165b061c43d6d9b73627b


    retrieveLogoResponse:
      description: The request has been completed successfully.
      content:
        application/json:
          schema:
            properties:
              id:
                type: string
                description: The unique identifier of the video.
              data:
                type: array
                description: |
                  An array that contains information about all the time ranges for which a brand logo has been identified.
                  For each time range for which the platform identifies the presence of brand logos within the specified video, it returns an object that contains the fields below.
                  If the platform doesn't find any logos, the `data` field is set to `None`.
                items:
                  type: object
                  properties:
                    start:
                      description: 'The start of the time range, expressed in seconds.'
                      type: number
                    end:
                      description: 'The end of the time range, expressed in seconds.'
                      type: number
                    value:
                      description: |
                        The logo identified within this time range.
                      type: string
              index_id:
                type: string
                description: The unique identifier of the index to which the video has been updated.
          example:
            id: 61e17c1c777e6caec646fa08
            data:
              - start: 28
                end: 29
                value: Verizon Wireless
              - start: 32
                end: 34
                value: Apple Inc.
            index_id: 61e165b061c43d6d9b73627b

    retrieveOcrResponse:
      description: OCRs have successfully been retrieved.
      content:
        application/json:
          schema:
            properties:
              id:
                type: string
                description: The unique identifier of the video.
              data:
                type: array
                description: |
                  An array that contains the OCR elements. For each time range for which the platform finds OCR elements, it returns an object that contains the fields below.
                  If the platform doesn't find any OCR elements, the `data` field is set to `None`.
                items:
                  type: object
                  properties:
                    start:
                      description: 'The start of the time range, expressed in seconds.'
                      type: number
                    end:
                      description: 'The end of the time range, expressed in seconds.'
                      type: number
                    value:
                      description: |
                        Recognized text within this time range.
                      type: string
              index_id:
                type: string
                description: The unique identifier of the index to which the video has been updated.
                example: 61e165b061c43d6d9b73627b
          example:
            id: 61e17c1c777e6caec646fa08
            data:
              - start: 22
                end: 42
                value: LIVE
              - start: 23
                end: 24
                value: VISITE SAO PAULO
              - start: 23
                end: 24
                value: TED KRAVITZ
            index_id: 61e165b061c43d6d9b73627b

    retrieveThumbnailResponse:
      description: A thumbnail has successfully been retrieved.
      content:
        application/json:
          schema:
            properties:
              thumbnail:
                type: string
                description: A string representing the URL of the thumbnail. Note that the URL expires in one hour.
          example:
            thumbnail: https://project-one-thumbnail.s3.us-west-2.amazonaws.com/6320748774fed2f3511f2a92/10.jpeg?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAYRWJPOVHXE5SJ77T%2F20220914%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20220914T075213Z&X-Amz-Expires=86400&X-Amz-SignedHeaders=host&x-id=GetObject&X-Amz-Signature=46b3bac13fb8b022313244780c238cb6bfc53eddcbee3be23a8d2dd22d99543e
  
    getVideoVectorsResponse:
      description: The video vectors in the specified index have successfully been retrieved.
      content:
        application/json:
          schema:
            properties:
              data:
                type: array
                description: An array that contains up to `page_limit` videos.
                items:
                  $ref: '#/components/schemas/videoVector'
              page_info:
                type: object
                description: An object that provides information about pagination.
                properties:
                  limit_per_page:
                    $ref: '#/components/schemas/limit_per_page_simple'
                  page:
                    $ref: '#/components/schemas/page'
                  total_page:
                    $ref: '#/components/schemas/total_page'
                  total_results:
                    $ref: '#/components/schemas/total_results'

            example:
              data:
                - _id: 62a17bf847f5678267ec10cc
                  created_at: '2022-06-09T04:50:00.879Z'
                  estimated_time: '2022-06-09T04:55:53.746Z'
                  index_id: 62a0906d47f5678267ec10a6
                  metadata:
                    duration: 531.998133
                    filename: 01.mp4
                    height: 400
                    width: 854
                  status: ready
                  updated_at: '2022-06-09T04:55:57.256Z'
                - _id: 62a17bce47f5678267ec10c6
                  created_at: '2022-06-09T04:49:20.001Z'
                  estimated_time: '2022-06-09T04:53:59.772Z'
                  index_id: 62a0906d47f5678267ec10a6
                  metadata:
                    duration: 741.875
                    filename: 02.mp4
                    height: 480
                    width: 854
                  status: ready
                  updated_at: '2022-06-09T04:54:10.345Z'
              page_info:
                limit_per_page: 10
                page: 1
                total_page: 1
                total_results: 2

    getVideoVectorResponse:
      description: The specified video information has successfully been retrieved.
      content:
        application/json:
          schema:
            properties:
              _id: 
                type: string
                description: The unique identifier of the video.
              created_at:
                type: string
                description: A string indicating the date and time, in the <a href="https://datatracker.ietf.org/doc/html/rfc3339" target="_blank">RFC 3339</a> format ("YYYY-MM-DDTHH:mm:ssZ"), that the video indexing task was created.
              updated_at: 
                type: string
                description: A string indicating the date and time, in the <a href="https://datatracker.ietf.org/doc/html/rfc3339" target="_blank">RFC 3339</a> format ("YYYY-MM-DDTHH:mm:ssZ"), that the corresponding video indexing task was last updated. The platform updates this field every time the corresponding video indexing task transitions to a different state.
              indexed_at:
                type: string
                description: A string indicating the date and time, in the <a href="https://datatracker.ietf.org/doc/html/rfc3339" target="_blank">RFC 3339</a> format ("YYYY-MM-DDTHH:mm:ssZ"), that the video indexing task has been completed.
              metadata:
                type: object
                description: An object that contains the information about the video.
                properties:
                  duration:
                    type: number
                  filename:
                    type: string
                  fps:
                    type: number
                  height:
                    type: integer
                  width:
                    type: integer
              hls:
                type: object
                description: The platform returns this object only for the videos that you uploaded with the `disable_video_stream` parameter set to `false`.
                properties:
                  video_url:
                    type: string
                    description: A string representing the URL of the video. You can then use this URL to access the stream over the <a href="https://en.wikipedia.org/wiki/HTTP_Live_Streaming" target="_blank">HLS</a> protocol.
                  thumbnail_urls:
                    type: array
                    description: An array containing the URL of the thumbnail.
                    items:
                      type: string
                  status:
                    type: string
                    description: A string representing the encoding status of the video file from its original format to a streamable format.
                  updated_at:
                    type: string
                    description: A string indicating the date and time, in the <a href="https://datatracker.ietf.org/doc/html/rfc3339" target="_blank">RFC 3339</a> format ("YYYY-MM-DDTHH:mm:ssZ"), that the encoding status was last updated.
              # source:
              #   type: object
              #   description: |
              #     An object that contains information about the source of the video. The platform returns this object only for videos uploaded from an external provider like YouTube.
              #   properties:
              #     type:
              #       type: string
              #       description: |
              #         A string indicating the source of the video (example: "youtube").
              #     name:
              #       type: string
              #       description: |
              #         A string representing the name of the channel that uploaded the video.
              #     url:
              #       type: string
              #       description: |
              #         A string representing the URL of the video


            example:
              _id: 61e17be5777e6caec646fa07
              created_at: 2022-01-14T13:34:29Z
              updated_at: 2022-01-14T13:34:29Z
              indexed_at: 2022-01-14T14:05:55Z
              metadata:
                duration: 3747.841667
                filename: IOKgzkakhlk.mp4
                fps: 29.97002997002997
                height: 360
                width: 482
              hls:
                video_url: https://d2cp8xx7n5vxnu.cloudfront.net/6298aa0b535db125bf6e1d10/64902a28fb01304dd47be3cb/stream/c924f34a-144e-41df-bf2a-c693703fa134.m3u8
                thumbnail_urls:
                  - https://d2cp8xx7n5vxnu.cloudfront.net/6298aa0b535db125bf6e1d10/64902a28fb01304dd47be3cb/thumbnails/c924f34a-144e-41df-bf2a-c693703fa134.0000001.jpg
                status: COMPLETE
                updated_at: 2024-01-16T07:59:40.879Z
              # source:
              #   type: youtube
              #   name: Here Be Barr
              #   url: https://www.youtube.com/watch?v=1JJfWnAryrM


    getIndexResponse:
      description: The specified index has successfully been retrieved.
      content:
        application/json:
          schema:
            properties:
              _id:
                type: string
                description: A string representing the unique identifier of the index. It is assigned by the API when an index is created.
              created_at:
                type: string
                description: A string representing the date and time, in the <a href="https://datatracker.ietf.org/doc/html/rfc3339" target="_blank">RFC 3339</a> format ("YYYY-MM-DDTHH:mm:ssZ"), that the index was created.
              updated_at:
                type: string
                description: A string representing the date and time, in the <a href="https://datatracker.ietf.org/doc/html/rfc3339" target="_blank">RFC 3339</a> format ("YYYY-MM-DDTHH:mm:ssZ"), that the index has been updated.
              expires_at:
                type: string
                description: |
                  A string representing the date and time, in the <a href="https://datatracker.ietf.org/doc/html/rfc3339" target="_blank">RFC 3339</a> format "YYYY-MM-DDTHH:mm:ssZ", when your index will expire.

                  If you're on the Free plan, the platform retains your index data for 90 days from creation. After this period, the platform deletes your index data, and this action cannot be undone. To continue using your index beyond this period, consider upgrading to the Developer plan, which offers unlimited index retention. For details, see the [Upgrade your plan](/docs/manage-your-plan#upgrade-your-plan) section.

                  If you're on the Developer plan, this field is set to `null`, indicating no expiration.

              index_name:
                type: string
                description: A string representing the name of the index.
              total_duration:
                type: number
                description: A number representing the total duration, in seconds, of the videos in the index.
              video_count:
                type: number
                description: The number of videos uploaded to this index.
              engines:
                type: array
                description: An array containing the list of the [video understanding engines](/docs/video-understanding-engines) enabled for this index.
                items:
                  type: object
                  properties:
                    engine_name:
                      type: string
                      description: A string representing the name of the engine
                    engine_options:
                      type: array
                      description: |
                        An array of strings that contains the [engines options](/docs/engine-options) enabled for this index.
                      items:
                        type: string
                    addons:
                      type: array
                      description: The list of add-ons that are enabled for this index.
                      items:
                        type: string
          example:
            _id: 62d9bafa90077fc60af827a0
            index_name: myIndex
            created_at: '2024-01-09T11:11:20.463Z'
            updated_at: '2024-01-09T11:17:15.296Z'
            expires_at: '2024-04-08T11:11:20.463Z'
            video_count: 12
            total_duration: 8716.8969
            engines:
              - engine_name: marengo2.6
                engine_options:
                  - visual
                  - text_in_video
                  - conversation
                  - logo
                addons:
                  - thumbnail
              - engine_name: pegasus1.1
                engine_options:
                  - visual
                  - conversation


    getVideoIndexingTasksResponse:
      description: The video indexing tasks have successfully been retrieved.
      content:
        application/json:
          schema:
            properties:
              data:
                type: array
                description: An array that contains up to `page_limit` tasks.
                items:
                  $ref: '#/components/schemas/videoIndexingTask'
              page_info:
                description: |
                  An object that provides information about pagination.
                type: object
                properties:
                  limit_per_page:
                    $ref: '#/components/schemas/limit_per_page_simple'
                  page:
                    $ref: '#/components/schemas/page'
                  total_page:
                    $ref: '#/components/schemas/total_page'
                  total_results:
                    $ref: '#/components/schemas/total_results'
          example:
            data:
              - _id: 62a17bf847f5678267ec10cc
                created_at: '2022-06-09T04:50:00.879Z'
                estimated_time: '2022-06-09T04:55:53.746Z'
                index_id: 62a0906d47f5678267ec10a6
                metadata:
                  duration: 531.998133
                  filename: 01.mp4
                  height: 400
                  width: 854
                status: ready
                updated_at: '2022-06-09T04:55:57.256Z'
              - _id: 62a17bce47f5678267ec10c6
                created_at: '2022-06-09T04:49:20.001Z'
                estimated_time: '2022-06-09T04:53:59.772Z'
                index_id: 62a0906d47f5678267ec10a6
                metadata:
                  duration: 741.875
                  filename: 02.mp4
                  height: 480
                  width: 854
                status: ready
                updated_at: '2022-06-09T04:54:10.345Z'
            page_info:
              limit_per_page: 10
              page: 1
              total_page: 1
              total_results: 2

    retrieveSummaryVideoIndexingTaskResponse:
      description: |
        An object containing the number video indexing tasks in each status.
      content:
        application/json:
          schema:
            properties:
              index_id:
                type: string
                description: The unique identifier of the index.
              ready:
                type: integer
                description: A value indicating the number of video indexing tasks for which the status is `ready`.
              validating:
                type: integer
                description: A value indicating the number of video indexing tasks for which the status is `validating`.
              pending:
                type: integer
                description:  A value indicating the number of video indexing tasks for which the status is `pending`.
              failed:
                type: integer
                description: A value indicating the number of video indexing tasks for which the status is `failed`.
              total_result:
                type: integer
                description: A value indicating the total number of video indexing tasks in the specified index.
          example:
              index_id: 635be12062c8def3b96b2616
              ready: 7
              validating: 2
              pending: 0
              indexing: 1
              failed: 0
              total_result: 10


    getVideoIndexingTaskResponse:
      description: The specified video indexing task has successfully been retrieved.
      content:
        application/json:
          schema:
            properties:
              _id:
                type: string
                description: The unique identifier of the video indexing task.
              created_at:
                type: string
                description: A string indicating the date and time, in the [RFC 3339](https://datatracker.ietf.org/doc/html/rfc3339) format ("YYYY-MM-DDTHH:mm:ssZ"), that the task object has been created.
              updated_at:
                type: string
                description: A string indicating the date and time, in the [RFC 3339](https://datatracker.ietf.org/doc/html/rfc3339) format ("YYYY-MM-DDTHH:mm:ssZ"), that the task object was last updated. The platform updates this field every time the video indexing task transitions to a different state.
              estimated_time:
                type: string
                description: A string indicating the estimated completion date and time of the video indexing process, in the <a href="https://datatracker.ietf.org/doc/html/rfc3339" target="_blank">RFC 3339</a> format ("YYYY-MM-DDTHH:mm:ssZ").
              index_id:
                type: string
                description: A string representing the unique identifier of index to which the video is uploaded.
              video_id:
                type: string
                description: A string representing the unique identifier of the video associated with the specified video indexing task. The API returns this field only when the value of the `status` field is `ready`.
              status:
                type: string
                description: A string indicating the status of the video indexing task. See the [Tasks](/reference/tasks) page for a list of possible statuses.
              metadata:
                type: object
                description: An object that contains details about the video.
                properties:
                  duration:
                    type: number
                  filename:
                    type: string
                  height:
                    type: integer
                  width:
                    type: integer
              hls:
                type: object
                description: The platform returns this object only for the videos that you uploaded with the `disable_video_stream` parameter set to `false`.
                properties:
                  video_url:
                    type: string
                    description: A string representing the URL of the video. You can then use this URL to access the stream over the <a href="https://en.wikipedia.org/wiki/HTTP_Live_Streaming" target="_blank">HLS</a> protocol.
                  thumbnail_urls:
                    type: array
                    description: An array containing the URL of the thumbnail.
                    items:
                      type: string
                  status:
                    type: string
                    description: A string representing the encoding status of the video file from its original format to a streamable format.
                  updated_at:
                    type: string
                    description: A string indicating the date and time, in the <a href="https://datatracker.ietf.org/doc/html/rfc3339" target="_blank">RFC 3339</a> format ("YYYY-MM-DDTHH:mm:ssZ"), that the encoding status was last updated.
              process:
                type: object
                description: If your video has not yet finished indexing, the platform returns the current progress of the indexing operation.
                properties:
                  percentage:
                    description: |
                      A value between 0 and 100 that indicates the percentage complete.
                    type: number
                  remain_seconds:
                    description: |
                      Estimated time left, expressed in seconds, until the video finishes indexing.
                    type: number

          example:
            _id: 61e1789761c43d6d9b7362f3
            created_at: 2022-01-14T13:20:22.986Z
            updated_at: 2022-01-17T08:35:21.639Z
            estimated_time: 2022-01-14T14:18:52.175Z
            index_id: 61e165b061c43d6d9b73627b
            metadata:
              duration: 4334.0297
              filename: WPK3hvTr8PU.mp4
              height: 360
              width: 544
            status: ready
            hls:
              video_url: https://d2cp8xx7n5vxnu.cloudfront.net/6298aa0b535db125bf6e1d10/64902a28fb01304dd47be3cb/stream/c924f34a-144e-41df-bf2a-c693703fa134.m3u8
              thumbnail_urls:
                - https://d2cp8xx7n5vxnu.cloudfront.net/6298aa0b535db125bf6e1d10/64902a28fb01304dd47be3cb/thumbnails/c924f34a-144e-41df-bf2a-c693703fa134.0000001.jpg
              status: COMPLETE
              updated_at: 2024-01-16T07:59:40.879Z


    getIndexesResponse:
      description: The indexes have successfully been retrieved.
      content:
        application/json:
          schema:
            properties:
              data:
                type: array
                description: An array that contains up to `page_limit` indexes.
                items:
                  $ref: '#/components/schemas/index'
              page_info:
                type: object
                description: An object that provides information about pagination.
                properties:
                  limit_per_page:
                    $ref: '#/components/schemas/limit_per_page_simple'
                  page:
                    $ref: '#/components/schemas/page'
                  total_page:
                    $ref: '#/components/schemas/total_page'
                  total_results:
                    $ref: '#/components/schemas/total_results'
            example:
              data:
                - _id: 62d85fe7340fa665f1fda5dd
                  index_name: index-01
                  created_at: '2024-01-09T11:11:20.463Z'
                  updated_at: '2024-01-09T11:17:15.296Z'
                  expires_at: '2024-04-08T11:11:20.463Z'
                  video_count: 2
                  total_duration: 1363.76
                  engines:
                    - engine_name: marengo2.6
                      engine_options:
                        - visual
                        - text_in_video
                        - conversation
                        - logo
                      addons:
                        - thumbnail
                    - engine_name: pegasus1.1
                      engine_options:
                        - visual
                        - conversation
                - _id: 62d858ee340fa665f1fda5d8
                  index_name: index-02
                  created_at: '2024-01-09T11:11:20.463Z'
                  updated_at: '2024-01-09T11:17:15.296Z'
                  expires_at: '2024-04-08T11:11:20.463Z'
                  video_count: 1
                  total_duration: 579.12
                  engines:
                    - engine_name: marengo2.6
                      engine_options:
                        - visual
                        - logo
                      addons:
                        - thumbnail
                    - engine_name: pegasus1.1
                      engine_options:
                        - visual
                        - conversation
              page_info:
                limit_per_page: 10
                page: 1
                total_page: 1
                total_results: 2
    createVideoIndexingTaskResponse:
      description: A video indexing task has successfully been created.
      content:
        application/json:
          schema:
            properties:
              _id:
                type: string
                description: A string representing the unique identifier of your video indexing task.
          example:
            _id: 62a1ec6d9ea24f052b971a0f
    getEngineResponse:
      description: The specified engine has successfully been retrieved
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/engine'
    getEnginesResponse:
      description: The engines have successfully been retrieved.
      content:
        application/json:
          schema:
            properties:
              data:
                type: array
                description: An array that contains the `engine` objects.
                items:
                  $ref: '#/components/schemas/engine'
            example:
                - _id: marengo2.6
                  allowed_engine_options:
                    - visual
                    - text_in_video
                    - conversation
                    - logo
                  author: twelve_labs
                  created_at: '2022-07-24 09:30:52.683 +0000 UTC'
                  finetune: false
                  ready: true
                  updated_at: '2022-07-24 09:30:52.683 +0000 UTC'
                - _id: marengo2
                  allowed_index_options:
                    - visual
                    - text_in_video
                    - conversation
                    - logo
                  author: twelve_labs
                  created_at: '2022-07-24 09:30:52.686 +0000 UTC'
                  finetune: false
                  ready: true
                  updated_at: '2022-07-24 09:30:52.686 +0000 UTC'
                - _id: pegasus1.1
                  allowed_engine_options:
                    - visual
                    - conversation
                  author: twelve_labs
                  created_at: '2023-04-12 11:49:26.663 +0000 UTC'
                  finetune: false
                  ready: true
                  updated_at: '2023-04-12 11:49:26.663 +0000 UTC'
                
    createIndexResponse:
      description: An index has successfully been created
      content:
        application/json:
          schema:
            properties:
              _id:
                type: string
                description: Represents the unique identifier of the `index` object.
            example:
              _id: 62d85fe7340fa665f1fda5dd
    
    searchResultsError:
      description: The request has failed.
      content:
        application/json:
          schema:
            type: object
            properties:
              error_code:
                type: integer
                description: |
                  Represents the code associated with the error. See the [Error codes](/reference/error-codes) page for details.
              message:
                type: string
                description: A human-readable string describing the error.
          example:
            error_code: 104
            message: The conversation option of transcription is not allowed with multiple search options. You should use semantic instead.

    insufficientFunds:
      description: The request has failed.
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: string
                description: |
                  A string representing the code associated with the error. See the [Error codes](/reference/error-codes) page for details.
              message: 
                type: string
                description: |
                  A human-readable string describing the error, intended to be suitable for display in a user interface.
              docs_url: 
                type: string
                description: |
                  The URL of the relevant documentation page.
          example:
            code: insufficient_funds
            message: Not enough free credit. Please register a payment method or contact sales@twelvelabs.io. 



    classify10hours:
      description: The request has failed.
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: string
                description: |
                  A string representing the code associated with the error. See the [Error codes](/reference/error-codes) page for details.
              message: 
                type: string
                description: |
                  A human-readable string describing the error, intended to be suitable for display in a user interface.
              docs_url: 
                type: string
                description: |
                  The URL of the relevant documentation page.
            example:
              code: parameter_invalid
              message: The total duration(seconds) 3760 of videos exceeds the limit.

    genericError:
      description: The request has failed.
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: string
                description: |
                  A string representing the code associated with the error. See the [Error codes](/reference/error-codes) page for details.
              message: 
                type: string
                description: |
                  A human-readable string describing the error, intended to be suitable for display in a user interface.
              docs_url: 
                type: string
                description: |
                  The URL of the relevant documentation page.
    notFound:
      description: The specifed resource does not exist.
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: string
                description: |
                  Represents the code associated with the error. See the [Error codes](/reference/error-codes) page for details.
              message:
                type: string
                description: A human-readable string describing the error.
            

    createTextEmbeddingResponse:
      description: |
        A text embedding has successfully been created.
      content:
        application/json:
          schema:
            type: object
            properties:
              engine_name:
                description: |
                  The name of the engine the platform has used to create this embedding.
                type: string
              text_embedding:
                description: |
                  An object that contains a field named `float` which is an array of floating point numbers representing the embedding. 
                type: object
                properties:
                  float:
                    description: |
                      An array of floating point numbers representing the embedding. Note that the example response was truncated for brevity.
                    type: array
                    items:
                      type: number
                      format: float
            example:
              engine_name: Marengo-retrieval-2.6
              text_embedding:
                float:
                  - 0.021137852
                  - -0.015733518

    createSyncEmbeddingResponse:
      description: |
        A text embedding has successfully been created. 
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/EmbeddingResponse'
            example:
              engine_name: Marengo-retrieval-2.6
              text_embedding:
                float:
                  - 0.021137852
                  - -0.015733518
    retrieveVideoEmbeddingResponse:
      description: |
        Video embeddings have successfully been retrieved.
      content:
        application/json:
          schema:
            properties:
              _id:
                type: string
                description: |
                  The unique identifier of the video embedding task.
              engine_name:
                type: string
                description: |
                  The name of the engine the platform uses to create the embeddings.
              status:
                type: string
                description: |
                  A string indicating the status of the video indexing task. It can take one of the following values: `processing`, `ready` or `failed`.
              video_embeddings:
                type: array
                description: |
                  An array of objects containing your embeddings.
                items:
                  type: object
                  description: |
                    Each object corresponds to an embedding and has the following fields:
                  properties:
                    start_offset_sec:
                      type: number
                      format: float
                      description: |
                        The start time of the video segment for this embedding. If the embedding scope is `video`, this field equals `0`.
                    end_offset_sec:
                      type: number
                      format: float
                      description: |
                        The end time of the video segment for this embedding. If the embedding scope is `video`, this field equals the duration of the video.
                    embedding_scope:
                      type: string
                      description: |
                        Indicates the scope of this embedding. It can take the following values:
                        - `video`: Indicates that this embedding if for the entire video.
                        - `clip`: Indicates that this embedding is for a specific segment.
                    embedding:
                      description: |
                        An object that contains a field named `float` which represents the embedding. 
                      type: object
                      properties:
                        float:
                          description: |
                            An array of floating point numbers representing the embedding. Note that the example response was truncated for brevity.
                          type: array
                          items:
                            type: number
                            format: float
              metadata:
                type: object
                description: |
                  An object containing metadata about the video.
                properties:
                  video_filename:
                    type: string
                    description: |
                      The name of the video file. The platform returns this field when you upload a video from your local file system.
                  video_url:
                    type: string
                    description: |
                      The URL of the video. The platform returns this field when you upload a video  from a publicly accessible URL.
                  video_clip_length:
                    type: number
                    description:  The duration for each clip in seconds, as specified by the `video_clip_length` parameter of the [`POST`](/reference/create-video-embeding-task) method of the `/embed/task` endpoint. Note that the platform automatically truncates video segments shorter than 2 seconds. For a 31-second video divided into 6-second segments, the final 1-second segment will be truncated. This truncation only applies to the last segment if it does not meet the minimum length requirement of 2 seconds.
                  video_embedding_scope:
                    type: array
                    description: |
                      The scope of the video embedding. It can contain one or both of the following values: `clip` and `video`.
                    items:
                      type: string
                      enum: [clip, video]
                  duration:
                    type: number
                    format: float
                    description: The total duration of the video in seconds. 
          example:
            _id: "663e16ac4d11aff765088b3a"
            engine_name: "Marengo-retrieval-2.6"
            status: "ready"
            video_embeddings:
              - start_offset_sec: 0
                end_offset_sec: 6
                embedding_scope: "clip"
                embedding:
                  float:
                    - -0.060086973
                    - 0.016479108
            
              - start_offset_sec: 6
                end_offset_sec: 12
                embedding_scope: "clip"
                embedding:
                  float:
                    - -0.056660935
                    - 0.012404642
            
              - start_offset_sec: 12
                end_offset_sec: 18
                embedding_scope: "clip"
                embedding:
                  float:
                    - -0.05971131
                    - -0.00859428
              - start_offset_sec: 0
                end_offset_sec: 18
                embedding_scope: "video"
                embedding:
                  float:
                    - -0.05971131
                    - -0.00859428
            metadata:
              video_filename: 01.mp4
              video_clip_length: 6
              video_embedding_scope: [clip, video]
              duration: 18

    listVideoEmbeddingTasksResponse:
      description: |
        A list of video embedding tasks has successfully been retrieved.
      content:
        application/json:
          schema:
            properties:
              data:
                type: array
                description: |
                  An array that contains up to `page_limit` video embedding tasks.
                items:
                  $ref: "#/components/schemas/videoEmbeddingTask"
              page_info:
                description: |
                  An object that provides information about pagination.
                type: object
                properties:
                  limit_per_page:
                    $ref: "#/components/schemas/limit_per_page_simple"
                  page:
                    $ref: "#/components/schemas/page"
                  total_page:
                    $ref: "#/components/schemas/total_page"
                  total_results:
                    $ref: "#/components/schemas/total_results"

    retrieveVideoEmbeddingTaskStatusResponse:
      description: |
        The status of your video embedding task has been retrieved.
      content:
        application/json:
          schema:
            properties:
              _id:
                type: string
                description: |
                  The unique identifier of the video embedding task.
              status:
                type: string
                description: |
                  A string indicating the status of the video indexing task. It can take one of the following values: `processing`, `ready` or `failed`. 
              engine_name:
                type: string
                description: |
                  The name of the engine the platform uses to create the embeddings.
              metadata:
                type: object
                description: |
                  An object containing metadata about the video.
                properties:
                  video_filename:
                    type: string
                    description: |
                      The name of the video file. The platform returns this field when you upload a video from your local file system.
                  video_url:
                    type: string
                    description: |
                      The URL of the video. The platform returns this field when you upload a video  from a publicly accessible URL.
                  video_clip_length:
                    type: number
                    description:  The duration for each clip in seconds, as specified by the `video_clip_length` parameter of the [`POST`](/reference/create-video-embeding-task) method of the `/embed/task` endpoint. Note that the platform automatically truncates video segments shorter than 2 seconds. For a 31-second video divided into 6-second segments, the final 1-second segment will be truncated. This truncation only applies to the last segment if it does not meet the minimum length requirement of 2 seconds.
                  video_embedding_scope:
                    type: array
                    description: |
                      The scope of the video embedding. It can contain one or both of the following values: `clip` and `video`.
                    items:
                      type: string
                      enum: [clip, video]
                  duration:
                    type: number
                    format: float
                    description: The total duration of the video in seconds.
                  
          example:
            _id: 6641c0efc70bb578439bd909
            engine_name: Marengo-retrieval-2.6
            status: processing
            metadata:
              video_filename: 01.mp4
              video_clip_length: 6
              video_embedding_scope: [clip, video]
              duration: 18

  
    createVideoEmbeddingTaskResponse:
      description: |
        A video embedding task has successfully been created.
      content:
        application/json:
          schema:
            properties:
              _id:
                type: string
                description: |
                  The unique identifier of the video embedding task. You can use the identifier to:
                  - Retrieve the status of your task by invoking the `GET` method of the `/embed/tasks/{task_id}/status` endpoint.
                  - Retrieve the embedding by invoking the  `GET` method of the `/embed/tasks/{task_id}` endpoint.
          example:
            _id: 66419a20c70bb578439bd8f4




    summarizeResponse:
      description: |
        The specified video has successfully been summarized.
      headers:
        X-Ratelimit-Limit:
          schema:
            type: number
          description: The maximum number of requests you can make per rate limit window for this endpoint. For details, see the [Rate limits](/docs/rate-limits) page.
          example: 100
        X-Ratelimit-Remaining:
          schema:
            type: number
          description: The number of requests remaining in the current rate limit window for the specific endpoint. This value decreases with each request you make to that endpoint and resets at the start of the next rate limit window.
          example: 99
        X-Ratelimit-Used:
          schema:
            type: number
          description: The number of requests you have made in the current rate limit window for the specific endpoint. This value increases with each request you make to that endpoint and resets to zero at the start of the next rate limit window.
          example: 1
        X-Ratelimit-Reset:
          schema:
            type: number
          description: The time at which the current rate limit window resets, expressed in UTC epoch seconds. After this time, the values of the `X-Ratelimit-Remaining` and `X-Ratelimit-Used` parameters will be reset to their initial values for the next rate limit window.
          example: 1718777276
      content:
        application/json:
          schema: 
            oneOf: 
              - type: object
                description: |
                  When the value of the `type` parameter is set to `summary`, the response is as follows:
                title: Summary
                properties:
                  id:
                    description: |
                      Unique identifier of the response.
                    type: string
                    example: 56dd2567-9b34-4ee9-9fbb-c20fc283e5bf
                  summary:
                    description: |
                      A brief report of the main points of the video.
                    type: string
                    example: |
                      Black Friday shoppers are shown in a mall, pushing and shoving through the crowds. A news reporter talks about shopping mania and its impact on stores. He mentions that stores are filled to the brim and that the hunt for deals can make people miserable. A woman talks to the camera about how people have lost their minds and how the American dream has become associated with material possessions.
              - type: object
                description: |
                  When the value of the `type` parameter is set to `chapter`, the response is as follows:
                title: Chapter
                properties:
                  id:
                    description: |
                      Unique identifier of the response.
                    type: string
                    example: da3cdd02-dff8-4712-a2a9-9b44f342c039
                  chapters:
                    description: |
                      An array that contains details about the detected chapters and their content.
                    type: array
                    items: 
                      type: object
                      description: |
                        An object that contains details about a chapter. Each chapter has a unique number, start time, end time, title, and summary.
                      properties:
                        chapter_number:
                          description: |
                            Represents the sequence number of the chapter. Note that this field starts at 0. Ensure to interpret it accordingly in your application.
                          type: integer
                        start:
                          description: |
                            The starting time of the chapter, measured in seconds from the beginning of the video.
                          type: integer
                        end:
                          description: |
                            The ending time of the chapter, measured in seconds from the beginning of the video.
                          type: integer
                        chapter_title:
                          description: |
                            The title of the chapter.
                          type: string
                        chapter_summary:
                          description: |
                            A brief summary describing the content of the chapter.
                          type: string
                    example:
                      - chapter_number: 0
                        start: 15
                        end: 30
                        chapter_title: Graduation and Moving Home
                        chapter_summary: The woman talks about her recent graduation and moving back home.
                      - chapter_number: 1
                        start: 30
                        end: 45
                        chapter_title: Outdoor Adventures
                        chapter_summary: The woman discusses spending time outdoors and getting a tan.
                      - chapter_number: 2
                        start: 45
                        end: 60
                        chapter_title: Shopping Hauls
                        chapter_summary: The woman talks about her recent shopping spree and purchases.

              - type: object
                description: |
                  When the value of the `type` parameter is set to `highlight`, the response is as follows:
                title: Highlight
                properties:
                  id:
                    description: |
                      Unique identifier of the response.
                    type: string
                    example: 2f2a504f-6956-446c-84d8-29d86f793c66
                  highlights:
                    description: |
                      An array that contains the highlights.
                    type: array
                    items:
                      type: object
                      description: |
                        An object that provides a brief snapshot of a specific part of the video.
                      properties:
                        start:
                          description: |
                            The starting time of the highlight, measured in seconds from the beginning of the video.
                          type: integer
                        end:
                          description: |
                            The ending time of the highlight, measured in seconds from the beginning of the video.
                          type: integer
                        highlight:
                          description: |
                            The tile of the highlight.
                          type: string
                        highlight_summary:
                          type: string
                          description: |
                              A brief description that captures the essence of this part of the video.

                    example:
                      - start: 0
                        end: 30
                        highlight: A woman vlogs about her summer day, sharing her experience while standing in her childhood home in Minnesota.
                        highlight_summary: The woman talks about her love for getting some sun, despite not tanning well, and shows the camera around her house, mentioning her fake tanner.
                      - start: 30
                        end: 60
                        highlight: A woman is making a video of her food preparation and tasting.
                        highlight_summary: A woman demonstrates how to make a delicious bread salad with tomatoes and cheese while explaining the process.

    gistResponse:
      description: |
        The gist has successfully been generated. 
      headers:
        X-Ratelimit-Limit:
          schema:
            type: number
          description: The maximum number of requests you can make per rate limit window for this endpoint. For details, see the [Rate limits](/docs/rate-limits) page.
          example: 100
        X-Ratelimit-Remaining:
          schema:
            type: number
          description: The number of requests remaining in the current rate limit window for the specific endpoint. This value decreases with each request you make to that endpoint and resets at the start of the next rate limit window.
          example: 99
        X-Ratelimit-Used:
          schema:
            type: number
          description: The number of requests you have made in the current rate limit window for the specific endpoint. This value increases with each request you make to that endpoint and resets to zero at the start of the next rate limit window.
          example: 1
        X-Ratelimit-Reset:
          schema:
            type: number
          description: The time at which the current rate limit window resets, expressed in UTC epoch seconds. After this time, the values of the `X-Ratelimit-Remaining` and `X-Ratelimit-Used` parameters will be reset to their initial values for the next rate limit window.
          example: 1718777276
      content:
        application/json:
          schema:
            type: object
            properties:
              id:
                description: |
                  Unique identifier of the response.
                type: string
              title:
                description: |
                  Suggested title for the video.
                type: string
              topics:
                description: |
                  An array containing a list of topics related to the video.
                type: array
                items:
                  type: string
              hashtags:
                description: |
                  Am array containing a list of hashtags related to the video.
                type: array
                items:
                  type: string
          example:
            id: bc213924-fa97-4af6-9ca2-3212f419d1e6
            title: "A Day in My Life: Graduation, Moving Home, Shopping Hauls, Cooking, and Outdoor Adventures!"
            topics:
              - Lifestyle Vlog
            hashtags:
              - graduation
              - moving
              - home
              - shopping
              - hauls
              - cooking
              - outdoor
              - adventures
              - lifestyle
              - vlog

    classifyResponseNew:
      description: The specified videos have successfully been classified.
      headers:
        X-Ratelimit-Limit:
          schema:
            type: number
          description: The maximum number of requests you can make per rate limit window for this endpoint. For details, see the [Rate limits](/docs/rate-limits) page.
          example: 100
        X-Ratelimit-Remaining:
          schema:
            type: number
          description: The number of requests remaining in the current rate limit window for the specific endpoint. This value decreases with each request you make to that endpoint and resets at the start of the next rate limit window.
          example: 99
        X-Ratelimit-Used:
          schema:
            type: number
          description: The number of requests you have made in the current rate limit window for the specific endpoint. This value increases with each request you make to that endpoint and resets to zero at the start of the next rate limit window.
          example: 1
        X-Ratelimit-Reset:
          schema:
            type: number
          description: The time at which the current rate limit window resets, expressed in UTC epoch seconds. After this time, the values of the `X-Ratelimit-Remaining` and `X-Ratelimit-Used` parameters will be reset to their initial values for the next rate limit window.
          example: 1718777276
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                description: An array that contains the response. Each element of the array contains information about a specific video.
                items:
                  type: object
                  properties:
                    video_id:
                      description: |
                        The unique identifier of the video that has been classified.
                      type: string
                    classes:
                      type: array
                      description: An array that contains information about the classes that were detected in your video. 
                      items:
                        type: object
                        properties:
                          name:
                            type: string
                            description: The name of the class.
                          score:
                            type: number
                            format: float
                            description: A number indicating the confidence level that the entire video matches the specified class.
                          duration_ratio:
                            type: number
                            format: float
                            description: A number indicating the sum of the lengths of the matching video clips inside a video divided by the total length of the video.
                          clips:
                            type: array
                            description:  An array containing details information about the video clips that match the prompts you've specified. The platform returns this array when you set the value of the `include_clips` parameter to `true` in the body of the request.
                            items:
                              type: object
                              properties:
                                start:
                                  $ref: '#/components/schemas/start_time'
                                end:
                                  $ref: '#/components/schemas/end_time'
                                score:
                                  type: number
                                  description: |
                                    A number indicating the confidence level that the video clips match the specified class.
                                option:
                                  type: string
                                  description: Indicates the type of match that the platform has performed.
                                prompt:
                                  type: string
                                  description: Indicates the prompt that the platform used.
                                thumbnail_url:
                                  $ref: '#/components/schemas/thumbnail_url'
                          detailed_scores:
                            type: object
                            description: When you set the value of the `show_detailed_score` parameter to `true` in the body of the request, the platform returns detailed information that helps you determine the likelihood that this video clip matches your prompts.
                            properties:
                              max_score:
                                type: number
                                format: float
                                description: |
                                  Represents the maximum score. It is determined by comparing the confidence scores of each clip and selecting the highest one.
                                
                                  **Min**: 0.
                                  **Max**: 100.
                              avg_score:
                                type: number
                                format: float
                                description: |
                                  Represents the average score of the matching video clips.
                                  
                                  **Min**: 0.
                                  **Max**: 100.
                              normalized_score:
                                type: number
                                format: float
                                description: |
                                  Represents the probability distribution of classes in the results, determined using the <a href="https://en.wikipedia.org/wiki/Softmax_function" target="_blank">Softmax function</a>.

                                  **Min**: 0
                                  **Max**: 100
              page_info:
                $ref: '#/components/schemas/classifyPageInfo'
          example:
            data:
              - video_id: 6435651a9ab33c7198615a80
                classes:
                - name: DanceTok
                  score: 96.77
                  duration_ratio: 1
                  clips:
                    - start: 167
                      end: 170
                      score: 9
                      option: text_in_video
                      prompt: Dance tutorial
                      thumbnail_url: https://project-one-thumbnail.s3.us-west-2.amazonaws.com/643d1b389ab33c7198616774/168.jpeg?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAYRWJPOVHXE5SJ77T%2F20230520%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20230520T122303Z&X-Amz-Expires=604799&X-Amz-SignedHeaders=host&x-id=GetObject&X-Amz-Signature=1e46088f00cd47d834eab5f2b942ca578a952c74cedbf278227857534d307606
                    - start: 165.63
                      end: 172.75
                      score: 83.4
                      option: visual
                      prompt: Dance group
                      thumbnail_url: https://project-one-thumbnail.s3.us-west-2.amazonaws.com/643d1b389ab33c7198616774/166.jpeg?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAYRWJPOVHXE5SJ77T%2F20230520%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20230520T122303Z&X-Amz-Expires=604799&X-Amz-SignedHeaders=host&x-id=GetObject&X-Amz-Signature=a31bf0b6a88ba972cc0ed3b055e08fd3b1ec8054b0c1274ac425719e3b7afb7e
                  detailed_scores:
                    max_score: 86.37
                    avg_score: 71.61
                    normalized_score: 100
              - video_id: 643564b39ab33c7198615a7f
                classes:
                - name: DanceTok
                  score: 95.46863419938227
                  duration_ratio: 0.99
                  clips:
                  - start: 473.09375
                    end: 595.09375
                    score: 84.92
                    option: visual
                    prompt: Dance tutorial
                    thumbnail_url: https://project-one-thumbnail.s3.us-west-2.amazonaws.com/643564b39ab33c7198615a7f/474.jpeg?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAYRWJPOVHXE5SJ77T%2F20230412%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20230412T115721Z&X-Amz-Expires=86400&X-Amz-SignedHeaders=host&x-id=GetObject&X-Amz-Signature=07fd122f6ea7305012ece1c1c46bcfbf0e7997f8e74418ce6a8e7ed030381090
                  - start: 369.09375
                    end: 371.09375
                    score: 56.52
                    option: visual
                    prompt: Dance group
                    thumbnail_url: https://project-one-thumbnail.s3.us-west-2.amazonaws.com/643564b39ab33c7198615a7f/370.jpeg?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAYRWJPOVHXE5SJ77T%2F20230412%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20230412T115721Z&X-Amz-Expires=86400&X-Amz-SignedHeaders=host&x-id=GetObject&X-Amz-Signature=0cb1d1ed7a99f4b3bb78d331a8865c9d7d7d9b1a441013517956c7fc61b8c460
                  detailed_scores:
                    max_score: 86.37
                    avg_score: 71.61
                    normalized_score: 100


            page_info:
              limit_per_page: 10
              total_results: 6
              page_expired_at: '2023-04-12T12:02:22Z'
              next_page_token: '846670'

    classifyBulkResponseNew:
      description: The videos in the specified index have successfully been classified.
      headers:
        X-Ratelimit-Limit:
          schema:
            type: number
          description: The maximum number of requests you can make per rate limit window for this endpoint. For details, see the [Rate limits](/docs/rate-limits) page.
          example: 100
        X-Ratelimit-Remaining:
          schema:
            type: number
          description: The number of requests remaining in the current rate limit window for the specific endpoint. This value decreases with each request you make to that endpoint and resets at the start of the next rate limit window.
          example: 99
        X-Ratelimit-Used:
          schema:
            type: number
          description: The number of requests you have made in the current rate limit window for the specific endpoint. This value increases with each request you make to that endpoint and resets to zero at the start of the next rate limit window.
          example: 1
        X-Ratelimit-Reset:
          schema:
            type: number
          description: The time at which the current rate limit window resets, expressed in UTC epoch seconds. After this time, the values of the `X-Ratelimit-Remaining` and `X-Ratelimit-Used` parameters will be reset to their initial values for the next rate limit window.
          example: 1718777276
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                description: An array that contains the response. 
                items:
                  type: object
                  properties:
                    video_id:
                      description: The unique identifier of the video.
                      type: string
                    classes:
                      type: array
                      description: An array that contains information about the classes that were detected in your videos. 
                      items:
                        type: object
                        properties:
                          name:
                            type: string
                            description: The name of the prompt.
                          score:
                            type: number
                            format: float
                            description: A number indicating the confidence level that the video clips match the specified class.
                          duration_ratio:
                            type: number
                            format: float
                            description: A number indicating the sum of the lengths of the matching video clips inside a video divided by the total length of the video.
                          clips:
                            type: array
                            description:  An array containing details information about the video clips that match the prompts you've specified. The platform returns this array when you set the value of the `include_clips` parameter to `true` in the body of the request.
                            items:
                              type: object
                              properties:
                                start:
                                  $ref: '#/components/schemas/start_time'
                                end:
                                  $ref: '#/components/schemas/end_time'
                                score:
                                  type: number
                                  description: |
                                    A number indicating the confidence level that the video clips match the specified class.
                                option:
                                  type: string
                                  description: Indicates the type of match that the platform has performed.
                                prompt:
                                  type: string
                                  description: Indicates the prompt that the platform used.
                                thumbnail_url:
                                  $ref: '#/components/schemas/thumbnail_url'
                          detailed_scores:
                            type: object
                            description: When you set the value of the `show_detailed_score` parameter to `true` in the body of the request, the platform returns detailed information that helps you determine the likelihood that this video clip matches your prompts.
                            properties:
                              max_score:
                                type: number
                                format: float
                                description: |
                                  Represents the maximum score. It is determined by comparing the confidence scores of each clip and selecting the highest one.
                                
                                  **Min**: 0.
                                  **Max**: 100.
                              avg_score:
                                type: number
                                format: float
                                description: |
                                  Represents the average score of the matching video clips.
                                  
                                  **Min**: 0.
                                  **Max**: 100.
                              duration_weighted_score:
                                type: number
                                format: float
                                description: |
                                  Represents the score of each matching video clip, weighted by its length.

                                  **Min**: 0
                                  **Max**: 100

                              normalized_score:
                                type: number
                                format: float
                                description: |
                                  Represents the probability distribution of classes in the results, determined using the <a href="https://en.wikipedia.org/wiki/Softmax_function" target="_blank">Softmax function</a>.

                                  **Min**: 0
                                  **Max**: 100
              page_info:
                $ref: '#/components/schemas/classifyPageInfo'
          example:
            data:
            - video_id: 6435651a9ab33c7198615a80
              classes:
              - name: DanceTok
                score: 96.77333333333335
                duration_ratio: 1
                clips:
                - start: 711.8125
                  end: 774.15625
                  score: 86.37
                  option: visual
                  prompt: Dance competition
                  thumbnail_url: https://project-one-thumbnail.s3.us-west-2.amazonaws.com/6435651a9ab33c7198615a80/712.jpeg?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAYRWJPOVHXE5SJ77T%2F20230412%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20230412T115721Z&X-Amz-Expires=86400&X-Amz-SignedHeaders=host&x-id=GetObject&X-Amz-Signature=94defeefcebaa10e7b60390b8a564a582ffa273535b1f74b97ae8324a3775afa
                - start: 207.425
                  end: 214.46875
                  score: 46.77
                  option: visual
                  prompt: Dance tutorial
                  thumbnail_url: https://project-one-thumbnail.s3.us-west-2.amazonaws.com/6435651a9ab33c7198615a80/208.jpeg?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAYRWJPOVHXE5SJ77T%2F20230412%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20230412T115721Z&X-Amz-Expires=86400&X-Amz-SignedHeaders=host&x-id=GetObject&X-Amz-Signature=aeaa1f38ee2fff2502ccc1719e96417eadc6a2ac915318b7f0818c544155663b
                detailed_scores:
                  max_score: 86.37
                  avg_score: 71.61
                  normalized_score: 100
            - video_id: 643564b39ab33c7198615a7f
              classes:
              - name: DanceTok
                score: 95.46
                duration_ratio: 0.99
                clips:
                - start: 473.09375
                  end: 595.09375
                  score: 84.92
                  option: visual
                  prompt: Dance tutorial
                  thumbnail_url: https://project-one-thumbnail.s3.us-west-2.amazonaws.com/643564b39ab33c7198615a7f/474.jpeg?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAYRWJPOVHXE5SJ77T%2F20230412%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20230412T115721Z&X-Amz-Expires=86400&X-Amz-SignedHeaders=host&x-id=GetObject&X-Amz-Signature=07fd122f6ea7305012ece1c1c46bcfbf0e7997f8e74418ce6a8e7ed030381090
                - start: 369.09375
                  end: 371.09375
                  score: 56.52
                  option: visual
                  prompt: Dance group
                  thumbnail_url: https://project-one-thumbnail.s3.us-west-2.amazonaws.com/643564b39ab33c7198615a7f/370.jpeg?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAYRWJPOVHXE5SJ77T%2F20230412%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20230412T115721Z&X-Amz-Expires=86400&X-Amz-SignedHeaders=host&x-id=GetObject&X-Amz-Signature=0cb1d1ed7a99f4b3bb78d331a8865c9d7d7d9b1a441013517956c7fc61b8c460
                detailed_scores:
                  max_score: 86.37
                  avg_score: 71.61
                  normalized_score: 100
            page_info:
              limit_per_page: 10
              total_results: 6
              page_expired_at: '2023-04-12T12:02:22Z'
              next_page_token: ''
              prev_page_token: '' 



    classifyBulkResponseNewSpecificPage:
      description: The videos in the specified index have successfully been classified.
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                description: An array that contains the response. 
                items:
                  type: object
                  properties:
                    video_id:
                      description: The unique identifier of the video.
                      type: string
                    classes:
                      type: array
                      description: An array that contains information about the classes that were detected in your videos. 
                      items:
                        type: object
                        properties:
                          name:
                            type: string
                            description: The name of the prompt.
                          score:
                            type: number
                            format: float
                            description: A number indicating the confidence level that the video clips match the specified class.
                          duration_ratio:
                            type: number
                            format: float
                            description: A number indicating the sum of the lengths of the matching video clips inside a video divided by the total length of the video.
                          clips:
                            type: array
                            description:  An array containing details information about the video clips that match the prompts you've specified. The platform returns this array when you set the value of the `include_clips` parameter to `true` in the body of the request.
                            items:
                              type: object
                              properties:
                                start:
                                  $ref: '#/components/schemas/start_time'
                                end:
                                  $ref: '#/components/schemas/end_time'
                                score:
                                  type: number
                                  description: |
                                    A number indicating the confidence level that the video clips match the specified class.
                                option:
                                  type: string
                                  description: Indicates the type of match that the platform has performed.
                                prompt:
                                  type: string
                                  description: Indicates the prompt that the platform used.
                                thumbnail_url:
                                  $ref: '#/components/schemas/thumbnail_url'
                          detailed_scores:
                            type: object
                            description: When you set the value of the `show_detailed_score` parameter to `true` in the body of the request, the platform returns detailed information that helps you determine the likelihood that this video clip matches your prompts.
                            properties:
                              max_score:
                                type: number
                                format: float
                                description: |
                                  Represents the maximum score. It is determined by comparing the confidence scores of each clip and selecting the highest one.
                                
                                  **Min**: 0.
                                  **Max**: 100.
                              avg_score:
                                type: number
                                format: float
                                description: |
                                  Represents the average score of the matching video clips.
                                  
                                  **Min**: 0.
                                  **Max**: 100.
                              duration_weighted_score:
                                type: number
                                format: float
                                description: |
                                  Represents the score of each matching video clip, weighted by its length.

                                  **Min**: 0
                                  **Max**: 100

                              normalized_score:
                                type: number
                                format: float
                                description: |
                                  Represents the probability distribution of classes in the results, determined using the <a href="https://en.wikipedia.org/wiki/Softmax_function" target="_blank">Softmax function</a>.

                                  **Min**: 0
                                  **Max**: 100
              page_info:
                $ref: '#/components/schemas/classifyPageInfo'
          example:
            data:
            - video_id: 6435651a9ab33c7198615a80
              classes:
              - name: DanceTok
                score: 96.77333333333335
                duration_ratio: 1
                clips:
                - start: 711.8125
                  end: 774.15625
                  score: 86.37
                  option: visual
                  prompt: Dance competition
                  thumbnail_url: https://project-one-thumbnail.s3.us-west-2.amazonaws.com/6435651a9ab33c7198615a80/712.jpeg?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAYRWJPOVHXE5SJ77T%2F20230412%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20230412T115721Z&X-Amz-Expires=86400&X-Amz-SignedHeaders=host&x-id=GetObject&X-Amz-Signature=94defeefcebaa10e7b60390b8a564a582ffa273535b1f74b97ae8324a3775afa
                - start: 207.425
                  end: 214.46875
                  score: 46.77
                  option: visual
                  prompt: Dance tutorial
                  thumbnail_url: https://project-one-thumbnail.s3.us-west-2.amazonaws.com/6435651a9ab33c7198615a80/208.jpeg?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAYRWJPOVHXE5SJ77T%2F20230412%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20230412T115721Z&X-Amz-Expires=86400&X-Amz-SignedHeaders=host&x-id=GetObject&X-Amz-Signature=aeaa1f38ee2fff2502ccc1719e96417eadc6a2ac915318b7f0818c544155663b
                detailed_scores:
                  max_score: 86.37
                  avg_score: 71.61
                  normalized_score: 100
            - video_id: 643564b39ab33c7198615a7f
              classes:
              - name: DanceTok
                score: 95.46
                duration_ratio: 0.99
                clips:
                - start: 473.09375
                  end: 595.09375
                  score: 84.92
                  option: visual
                  prompt: Dance tutorial
                  thumbnail_url: https://project-one-thumbnail.s3.us-west-2.amazonaws.com/643564b39ab33c7198615a7f/474.jpeg?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAYRWJPOVHXE5SJ77T%2F20230412%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20230412T115721Z&X-Amz-Expires=86400&X-Amz-SignedHeaders=host&x-id=GetObject&X-Amz-Signature=07fd122f6ea7305012ece1c1c46bcfbf0e7997f8e74418ce6a8e7ed030381090
                - start: 369.09375
                  end: 371.09375
                  score: 56.52
                  option: visual
                  prompt: Dance group
                  thumbnail_url: https://project-one-thumbnail.s3.us-west-2.amazonaws.com/643564b39ab33c7198615a7f/370.jpeg?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAYRWJPOVHXE5SJ77T%2F20230412%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20230412T115721Z&X-Amz-Expires=86400&X-Amz-SignedHeaders=host&x-id=GetObject&X-Amz-Signature=0cb1d1ed7a99f4b3bb78d331a8865c9d7d7d9b1a441013517956c7fc61b8c460
                detailed_scores:
                  max_score: 86.37
                  avg_score: 71.61
                  normalized_score: 100
            page_info:
              limit_per_page: 10
              total_results: 6
              page_expired_at: '2023-04-12T12:02:22Z'
              next_page_token: '490d1751-ee0c-4b19-b9af-bb7498ecd348-1'
              prev_page_token: '490d1751-ee0c-4b19-b9af-bb7498ecd348-0'

      
      
##########################
###   Request Bodies   ###
##########################

  requestBodies:

    createSyncEmbeddingRequest:
      required: true
      content:
        multipart/form-data:
          schema:
            type: object
            required:
              - engine_name
            properties:
              engine_name:
                type: string
                description: |
                  The name of the engine you want to use. The following engines are available:
                    - `Marengo-retrieval-2.6`
                example: Marengo-retrieval-2.6
                default: Marengo-retrieval-2.6
              
              text:
                type: string
                description: |
                  The text for which you wish to create an embedding.

                  **NOTE**:
                  Text embeddings are limited to 77 tokens. If the text exceeds this limit, the platform truncates it according to the value of the `text_truncate` parameter described below.

                  **Example**: "Man with a dog crossing the street"
                example: Man with dog crossing the steet
              text_truncate:
                type: string
                description: |
                  Specifies how the platform truncates text that exceeds 77 tokens to fit the maximum length allowed for an embedding.
                  This parameter can take one of the following values:
                  - `start`: The platform will truncate the start of the provided text.
                  - `end`: The platform will truncate the end of the provided text.
                  - `none`: The platform will return an error if the text is longer than the maximum token limit.
                  **Default**: `end`
                default: end
                example: end


              image_url:
                type: string
                format: uri
                description: |
                  The publicly accessible URL of the image for which you wish to create an embedding. This parameter is required for image embeddings if `image_file` is not provided.
              image_file:
                type: string
                format: binary
                description: |
                  The image file for which you wish to create an embedding as a local file. This parameter is required for image embeddings if `image_url` is not provided.
              audio_url:
                type: string
                format: uri
                description: |
                  The publicly accessible URL of the audio file for which you wish to creae an emebdding. This parameter is required for audio embeddings if `audio_file` is not provided.
              audio_file:
                type: string
                format: binary
                description: |
                  The audio file for which you wish to create an embedding as a local file. This parameter is required for audio embeddings if `audio_url` is not provided.
              audio_truncate: 
                type: string
                description: |
                  Specifies how the platform truncates audio files that exceed 10 seconds to fit the maximum length allowed for an embedding.
                  This parameter can take one of the following values:
                  - `start`: The platform will truncate the start of the provided audio file.
                  - `end`: The platform will truncate the end of the provided audio file.
                  - `none`: The platform will return an error if the audio file is longer than the maximum limit.
                  **Default**: `end`
                default: end
                example: end

    createVideoEmbeddingTaskRequest:
      content:
        multipart/form-data:
          schema:
            type: object
            required:
              - engine_name
            properties:
              engine_name:
                type: string
                description: |
                  The name of the engine you want to use. The following engines are available:
                    - `Marengo-retrieval-2.6`
                example: Marengo-retrieval-2.6
                default: Marengo-retrieval-2.6
              video_file:
                type: string
                format: binary
                description: |
                  Specify this parameter to upload a video from your local file system.
              video_url:
                type: string
                description: |
                  Specify this parameter to upload a video from a publicly accessible URL.
              video_start_offset_sec:
                type: number
                format: float
                description: |
                  The start offset in seconds from the beginning of the video where processing should begin. Specifying 0 means starting from the beginning of the video.

                  **Default**: 0
                  **Min**: 0
                  **Max**: Duration of the video minus 6
                example: 0
              video_end_offset_sec:
                type: number
                format: float
                description: |
                  The end offset in seconds from the beginning of the video where processing should stop.
                  
                  Ensure the following when you specify this parameter:
                  - The end offset does not exceed the total duration of the video file.
                  - The end offset is greater than the start offset.
                  - You must set both the start and end offsets. Setting only one of these offsets is not permitted, resulting in an error.

                  **Min**: video_start_offset + 6
                  **Max**: Duration of the video file
              video_clip_length:
                type: number
                format: integer
                description: |
                  The desired duration in seconds for each clip for which the platform generates an embedding. Ensure that the clip length does not exceed the interval between the start and end offsets.

                  **Default**: 6
                  **Min**: 2
                  **Max**: 10
              video_embedding_scope:
                type: string
                description: |
                  Defines the scope of the video embedding generation. You can specify one or both of the following values:
                  - `clip`: Use this value to create embeddings for each video segment of `video_clip_length` seconds, from `video_start_offset_sec` to `video_end_offset_sec`.
                  - `video`: Use this value to create an embedding for the entire video.

                  To create both embeddings for specific video segments and for the entire video, include this parameter twice in the request as shown below:

                  ```json
                  --form video_embedding_scope=clip \
                  --form video_embedding_scope=video
                  ```

                  **Default**: `clip`
                default: clip
                example: clip

    createTextEmbeddingRequest:
      required: true
      content:
        multipart/form-data:
          schema: 
            type: object
            required:
              - engine_name
              - text
            properties:
              engine_name:
                type: string
                description: |
                  The name of the engine you want to use. The following engines are available:
                    - `Marengo-retrieval-2.6`
                example: Marengo-retrieval-2.6
              text:
                type: string
                description: |
                  The text for which you want to create an embedding.

                  **NOTE**:
                  Text embeddings are limited to 77 tokens. If the text exceeds this limit, the platform truncates it according to the value of the `text_truncate` parameter described below.

                  **Example**: "Man with a dog crossing the street"
                example: Man with a dog crossing the street 
              text_truncate:
                type: string
                description: |
                  Specifies how the platform truncates text that exceeds 77 tokens to fit the maximum length allowed for an embedding.
                  This parameter can take one of the following values:
                    - `start`: The platform will truncate the start of the provided text.
                    - `end`: The platform will truncate the end of the provided text.
                    - `none`: The platform will return an error if the text is longer than the maximum token limit.

                    **Default**: `end`
                default: end
                example: end

                  


    generateTextRepresentationRequest:
      required: true
      content:
        application/json:
          schema: 
            type: object
            required:
              - video_id
              - prompt
            properties:
              video_id:
                type: string
                description: The unique identifier of the video for which you wish to generate a text.
              prompt:
                type: string
                description: |
                  A prompt that guides the model on the desired format or content.

                  **NOTES**:
                    - Even though the model behind this endpoint is trained to a high degree of accuracy, the preciseness of the generated text may vary based on the nature and quality of the video and the clarity of the prompt.
                    - Your prompts can be instructive or descriptive, or you can also phrase them as questions. 
                    - The maximum length of a prompt is 1500 characters.
                
                  **Examples**:
                    
                    - Based on this video, I want to generate five keywords for SEO (Search Engine Optimization).
                    - I want to generate a description for my video with the following format: Title of the video, followed by a summary in 2-3 sentences, highlighting the main topic, key events, and concluding remarks.
              temperature:
                type: number
                format: float
                description: |
                  Controls the randomness of the text output generated by the model. A higher value generates more creative text, while a lower value produces more deterministic text output.

                  **Default:** 0.7
                  **Min:** 0
                  **Max:** 1
                default: 0.7
                example: 0.7
                maximum: 1
                minimum: 0
              stream:
                type: boolean
                description: |
                  Set this parameter to `true` to enable streaming responses in the <a href="https://github.com/ndjson/ndjson-spec" target="_blank">NDJSON</a> format. 

                  **Default:** `false`
                default: false
                example: false
              

    summarizeRequest:
      content:
        application/json:
          schema:
            type: object
            required:
              - video_id
              - type
            properties:
              video_id:
                type: string
                description: |
                  The unique identifier of the video that you want to summarize.
              type:
                type: string
                description: |
                  Specifies the type of summary. Use one of the following values:
                    - `summary`: A brief that encapsulates the key points of a video, presenting the most important information clearly and concisely.
                    - `chapter`: A chronological list of all the chapters in a video, providing a granular breakdown of its content. For each chapter, the platform returns its starting and end times, measured in seconds from the beginning of the video clip, a descriptive headline that offers a brief of the events or activities within that part of the video, and an accompanying summary that elaborates on the headline.
                    - `highlight`: A chronologically ordered list of the most important events within a video. Unlike chapters, highlights only capture the key moments, providing a snapshot of the video's main topics. For each highlight, the platform returns its starting and end times, measured in seconds from the beginning of the video, a title, and a brief description that captures the essence of this part of the video.

              prompt:
                  type: string
                  description: |
                    Use this field to provide context for the summarization task, such as the target audience, style, tone of voice, and purpose.

                    **NOTES**:
                      - Your prompts can be instructive or descriptive, or you can also phrase them as questions.
                      - The maximum length of a prompt is 1500 characters.

                    **Example**: Generate a summary of this video for a social media post, up to two sentences.
              temperature:
                type: number
                format: float
                description: |
                  Controls the randomness of the text output generated by the model. A higher value generates more creative text, while a lower value produces more deterministic text output.

                  **Default:** 0.7
                  **Min:** 0
                  **Max:** 1
                default: 0.7
                example: 0.7
                maximum: 1
                minimum: 0

    gistRequest:
      content:
        aplication/json:
          schema:
            type: object
            required: 
              - video_id
              - types
            properties:
              video_id:
                type: string
                description: |
                  The unique identifier of the video for which you want to generate a gist.
              types:
                type: array
                description: |
                  An array specifying the type of text the platform must generate. Use one or more of the following values:

                    - `topic`: A topic is the central theme of a video, such as "Shopping Vlog Lifestyle", summarizing its content for efficient categorization and reference.

                    - `hashtag`: A hashtag, like "#BlackFriday", represents key themes in a video, enhancing its discoverability and categorization on social media platforms.
                    
                    - `title`: A title succinctly captures a video's main theme, such as "From Consumerism to Minimalism: A Journey Toward Sustainable Living," guiding viewers to its content and themes.

                items:
                  type: string
                  minItems: 1
                  enum:
                    - topic
                    - hashtag
                    - title

    classifyRequestNew:
      content:
        application/json:
          schema:
            type: object
            required:
                - video_ids
                - classes
                - options
                - conversation_option
            properties:
                video_ids:
                  type: array
                  description: |
                    An array containing the unique identifiers of the videos that you want to classify.
                  items:
                    type: string
                    minItems: 1
                page_limit:
                  type: integer
                  description: |
                    The number of items to return on each page.

                    **Default:** 10
                    **Min:** 1
                    **Max:** 50
                  default: 10
                  example: 10
                include_clips:
                  $ref: '#/components/schemas/include_clips'
                threshold: 
                  description: |
                    An object that allows you to filter the results.
                  type: object
                  properties:
                    min_video_score:
                      description: |
                        The video score represents the confidence level that a video matches the specified class. Use this field to specify the minimum value for the video score. The platform returns only the results for which the value of the `classes.score` field in the response is greater than or equal to `min_video_score`.
                        
                        **Default:** 75
                        **Min:** 1
                        **Max:** 100
                      type: number
                      default: 75
                      maximum: 100
                      minimum: 1
                      example: 75
                    
                    min_clip_score:
                      description: |
                        The clip score represents the confidence level that a clip matches the specified class. Use this field to specify the minimum value for the clip score. The platform returns only the results for which the value of the `classes.clips.score` field is greater than or equal to `min_clip_score`.
                        
                        **Default:** 30
                        **Min:** 1
                        **Max:** 10
                      type: number
                      default: 30
                      maximum: 100
                      minimum: 1
                      example: 30

                    min_duration_ratio:
                      description: | 
                        The duration ratio represents the sum of the lengths of the matching video clips inside a video divided by the total length of the video. Use this field to specify the minimum value for the duration ratio. The platform will return only the results for which the value of the `classes.duration_ratio` field is greater than or equal to `min_duration_ratio`.
                        
                        **Default:** 0.5
                        **Min:** 0.01
                        **Max:** 1
                      type: number
                      format: float
                      default: 0.5
                      maximum: 1
                      minimum: 0.01
                      example: 0.5

                show_detailed_score:
                  type: boolean
                  default: false
                  description: |
                    Set this parameter to `true` to specify that the platform should return a detailed score for each matching video clip. A detailed score contains the following information:

                    - **Maximum score**: Represents the maximum score. It is determined by comparing the confidence scores of each matching clip and selecting the highest one.
                    - **Average score**: Represents the average score of the matching video clips.
                    - **Normalized score**: Represents the probability distribution of classes in the results, determined using the <a href="https://en.wikipedia.org/wiki/Softmax_function" target="_blank">Softmax function</a>.

                options:
                  $ref: '#/components/schemas/options_classify'
                conversation_option:
                  $ref: '#/components/schemas/conversation_option'
                classes:
                  $ref: '#/components/schemas/classes'


                    
    classifyRequestBulkNew:
      content:
        application/json:
          schema:
            type: object
            required:
              - index_id
              - classes
              - options
              - conversation_option
            properties:
              index_id:
                type: string
                description: |
                  The unique identifier of the index that you want to classify.
              page_limit:
                type: integer
                description: |
                  The number of items to return on each page.

                  **Default:** 10
                  **Min:** 1
                  **Max:** 50
                default: 10
              include_clips:
                $ref: '#/components/schemas/include_clips'
              threshold: 
                $ref: '#/components/schemas/thresholdClassifyNew'
              show_detailed_score:
                type: boolean
                default: false
                description: |
                  Set this parameter to `true` to specify that the platform should return a detailed score for each matching video clip. A detailed score contains the following information:

                  - **Maximum score**: Represents the maximum score. It is determined by comparing the confidence scores of each matching clip and selecting the highest one.
                  - **Average score**: Represents the average score of the matching video clips.
                  - **Duration weighted score**: Represents the score of each matching video clip, weighted by its length.
                  - **Normalized score**: Represents the probability distribution of classes in the results, determined using the <a href="https://en.wikipedia.org/wiki/Softmax_function" target="_blank">Softmax function</a>.

              options:
                $ref: '#/components/schemas/options_classify'
              conversation_option:
                $ref: '#/components/schemas/conversation_option'
              classes:
                $ref: '#/components/schemas/classes'

    combinedSearch:
      content:
        application/json:
          schema:
            type: object
            required:
              - index_id
              - query
              - search_options
            properties:
              index_id:
                description: |
                  The unique identifier of the index to search.
                type: string
              search_options:
                description: |
                  An array that specifies the sources of information the platform uses when performing a search. For details, see the [Search options](/docs/search-options) page.
                    
                  **NOTES:** 
                  - The search options you specify must be a subset of the [engine options](/docs/engine-options) used when you created the index.
                type: array
                items:
                  type: string
                  minItems: 1
                  maxItems: 4
                example:
                  - visual
                  - conversation
                  - text_in_video
                  - logo
              conversation_option:
                description: |
                  Specifies the type of match the platform will perform. The following values are supported: `semantic` and `exact_match`. For details, see the [Conversation option](/docs/conversation-option) page.

                  **Default:** `semantic`
                default: semantic
                enum:
                - semantic
                - exact_match
                type: string
              adjust_confidence_level:
                type: number
                format: float
                description: |
                  This parameter specifies the strictness of the thresholds for assigning the high, medium, or low confidence levels to search results. If you use a lower value, the thresholds become more relaxed, and more search results will be classified as having high, medium, or low confidence levels. You can use this parameter to include a broader range of potentially relevant video clips, even if some results might be less precise. 

                  **Min**: 0
                  **Max**: 1
                  **Default:** 0.5
                default: 0.5
                example: 0.5
              query:
                type: object
                description: |
                  
                  Use the `query` parameter to build combined queries.

                  For details about building combined queries, see the [Combined queries](/docs/search-combined-queries) page.

                additionalProperties: {}

                properties:
                  text:
                    type: string
                    description: |
                      Your search query. Note that the platform supports full natural language-based search. The following examples are valid queries: "birds flying near a castle," "sun shining on the water," "chickens on the road," "an officer holding a child's hand.", "crowd cheering in the stadium."
                  search_options:
                    description: |
                      If set, overrides the search options for this query.
                    type: array
                    items:
                      - visual
                      - conversation
                      - text_in_video
                      - logo
                    minItems: 1
                    maxItems: 4
                  conversation_option:
                    description: |
                      If set, overrides the conversation option for this query.
                    default: semantic
                    enum:
                    - semantic
                    - exact_match
                    type: string

                  proximity:
                    type: number
                    description: |
                      When specifying multiple search queries, you can use the `proximity` parameter to limit or expand your search results by extending the lower and upper boundaries of each subquery. This parameter is expressed in seconds.


                      **Example:**
                      You've specified two queries and used to `AND` logical operator to retrieve only the video clip for which both queries match. The first query matches a video clip that starts at 10s and end at 30s. The second query second query matches a video clip that starts at 50s and ends at 60s.


                      If you don't specify the `proximity` parameter, then it takes the default value of 0s. The video clip will not overlap, and the platform will not return any results.

                      If you specify a value of 20s for the `proximity` parameter, the first video clip will start at 0s and end at 50s, and the second video clip will start at 30s and end at 80s. The video clips will overlap, and the platform will return a result that starts 30s and ends at 50s.

                      **Default**: `0`.
                    default: 0

              filter:
                  description: |
                    Use this parameter to filter your search results by metadata.

                    For string fields, the filter parameter returns only the results that equal the value you specify. The following example filters on the videos whose title is "Animal Encounters part 1": `"title": "Animal Encounters part 1"`.

                    For numeric fields, the filter parameter returns the results that match based on the arithmetic comparison. The following example filters on the videos whose height is greater than or equal to 400 and less than or equal to 500: `"height": { "gte": 400, "lte": 500 }`.

                    To enable filtering by custom fields:
                    1. Add metadata to your video by calling the the [`PUT`](/reference/update-video-information) method of the `/indexes/:index-id/videos/:video-id` endpoint
                    2. Use the custom fields as filter criteria in your queries. For example, to return only videos where a custom field named `needsReview` of type boolean is `true`, use: `"needs_review": true`.
                  properties:
                    id:
                      type: array
                      description: An array of strings that filters your search results based on the specified video IDs.
                      items:
                        type: string

                    duration:
                      type: object
                      description: |
                        This field filters your search results based on the duration of the video containing the segment that matches your query. 

                        The following example filters search results to include only the segments from videos with a duration greater than or equal to 600 seconds and less than or equal to 800 seconds: 
                        ```
                        "duration": {
                          "gte": 600,
                          "lte": 800
                        }
                        ```
                      properties:
                        gte:
                          type: number
                          format: float
                          description: |
                            This field specifies the minimum duration, expressed in seconds, of the video.
                        lte:
                          type: number
                          format: float
                          description: |
                            This field specifies the maximum duration, expressed in seconds, of the video.

                    width:
                      type: number
                      description: A numeric field that filters your search results based on width.
                    height:
                      type: number
                      description: A numeric field that filters your search results based on height.
                    size:
                      type: number
                      description: 'A numeric field that filters your search results based on size, expressed in bytes.'
                    title:
                      type: string
                      description: A string field that filters your search results based on the title of the video.
                  additionalProperties: {}
              page_limit:
                type: number
                description: |
                  The number of items to return on each page.

                  **Default**: `10`
                  **Max**: `50`
                default: 10
              threshold:
                $ref: '#/components/schemas/threshold_search'
    classifyRequest:
      content:
        application/json:
          schema:
            type: object
            required:
            - labels
            - options
            - video_id
            properties:
              conversation_option:
                $ref: '#/components/schemas/conversation_option'
              include_clips:
                $ref: '#/components/schemas/include_clips'
              labels:
                $ref: '#/components/schemas/labels'
              options:
                $ref: '#/components/schemas/options'
              threshold:
                $ref: '#/components/schemas/threshold'


    update-video-vector:
      content:
        application/json:
          schema:
            type: object
            properties:
              video_title:
                type: string
                description: |
                  Specifies the new title of the video.
              metadata:
                type: object
                description: |
                  Metadata that helps you categorize your videos. You can specify a list of keys and values. Keys must be of type `string`, and values can be of the following types: `string`, `integer`, `float` or `boolean`.

                  **NOTES:**
                  -  If you want to store other types of data such as objects or arrays,  you must convert your data into string values.
                  - You cannot override any of the predefined metadata (example: duration, width, length, etc) associated with a video.
                additionalProperties: {}

    any-to-video-search:
      content:
        multipart/form-data:
          encoding:
            search_options:
              style: form
              explode: true
          schema:
            required:
              - index_id
              - search_options
            type: object
            properties:
              query_media_type:
                type: string
                description: |
                  The type of media you wish to use. This parameter is required for media queries. For example, to perform an image-based search, set this parameter to `image`.
                enum:
                  - image
              query_media_url:
                type: string
                description: |
                  The publicly accessible URL of the media file you wish to use. This parameter is required for media queries if `query_media_file` is not provided.
              query_media_file:
                description: |
                  The media you wish to use as a local file. This parameter is required for media queries if `query_media_url` is not provided. 
                type: string
                format: binary
              query_text:
                type: string
                description: |
                  The text query to search for. This parameter is required for text queries. Note that the platform supports full natural language-based search.
              index_id:
                type: string
                description: |
                  The unique identifier of the index to search.
              search_options:
                type: array
                items:
                  type: string
                  enum: [visual, conversation, text_in_video, logo]
                description: |
                  Specifies the [sources of information](/docs/search-options) the platform uses when performing a search. You must include the `search_options` parameter separately for each desired source of information.

                  **NOTES:** 
                  - The search options you specify must be a subset of the [engine options](/docs/engine-options) used when you created the index.
                  - You can specify multiple search options in conjunction with the `operator` parameter described below to broaden or narrow your search.

                  Example:
                  To search using both visual and audio cues, include this parameter twice in the request as shown below:
                  ```JSON
                  --form search_options=visual \
                  --form search_options=conversation \
                  ```
              adjust_confidence_level:
                type: number
                format: float
                description: |
                  This parameter specifies the strictness of the thresholds for assigning the high, medium, or low confidence levels to search results. If you use a lower value, the thresholds become more relaxed, and more search results will be classified as having high, medium, or low confidence levels. You can use this parameter to include a broader range of potentially relevant video clips, even if some results might be less precise. 

                  **Min**: 0
                  **Max**: 1
                  **Default:** 0.5
                default: 0.5
                example: 0.5

              group_by:
                type: string
                description: |
                  Use this parameter to group or ungroup items in a response. It can take one of the following values:
                  - `video`:  The platform will group the matching video clips in the response by video.
                  - `clip`: The matching video clips in the response will not be grouped.

                  **Default:** `clip`
                enum:
                  - video
                  - clip
                default: clip
              threshold:
                $ref: '#/components/schemas/threshold_search'
              sort_option:
                type: string
                description: |
                  Use this parameter to specify the sort order for the response.
                  
                  When performing a search, the platform determines the level of confidence that each video clip matches your search terms. By default, the search results are sorted on the level of confidence in descending order. 

                  If you set this parameter to `score` and `group_by` is set to `video`, the platform will determine the maximum value of the `score` field for each video and sort the videos in the response by the maximum value of this field. For each video, the matching video clips will be sorted by the level of confidence.

                  If you set this parameter to `clip_count` and `group_by` is set to `video`, the platform will sort the videos in the response by the number of clips. For each video, the matching video clips will be sorted by the level of confidence. You can use `clip_count` only when the matching video clips are sorted by video.
                  

                  **Default:** `score`
                enum:
                  - score
                  - clip_count
                default: score
              operator:
                type: string
                description: |
                  When you perform a search specifying multiple [sources of information](/docs/search-options), you can use the this parameter to broaden or narrow your search.
                    
                    The following logical operators are supported:
                    
                    - `or`
                    
                    - `and`
                    
                    For details and examples, see the [Using multiple sources of information](/docs/search-single-queries#using-multiple-sources-of-information) section.

                    
                    **Default**: `or`.
                example: or
                default: or
              conversation_option:
                $ref: '#/components/schemas/conversation_option_any_to_video'
              page_limit:
                type: integer
                description: |
                  The number of items to return on each page. When grouping by video, this parameter represents the number of videos per page. Otherwise, it represents the maximum number of video clips per page. 

                  **Max**: `50`.
                default: 10
              filter:
                type: string
                description: |
                  This parameter accepts a stringified object to filter search results:
                  - For string fields: Use the exact match operator (`=`) to return results that exactly equal the specified value. Syntax: `"field": "value"`.
                  - For numeric fields: Use either exact match (`=`) or comparison operators (`gte`, `lte`) for arithmetic comparisons Syntax: `"field": number` or `"field": { "gte": number, "lte": number }`.

                  The filter object can contain the following properties:
                  - `id`: An array of strings to filter by specific video IDs. Example: `"id": ["video1", "video2"]`.
                  - `duration`: An object to filter your search results based on the duration of the video containing the segment that matches your query. Example: `"duration": { "gte": 600, "lte": 800 }`.
                  - `width`: A numeric value to filter by video width. Example: `"width": 1920` or `"width": { "gte": 1280, "lte": 1920 }`
                  - `height`: A numeric value to filter by video height. Example: `"height": 1080` or `"height": { "gte": 720, "lte": 1080 }`.
                  - `size`: A numeric value to filter by video size in bytes. Example: `"size": 1048576` or `"size": { "gte": 1048576, "lte": 5242880 }`.
                  - `title`: A string value to filter by video title. Example: `"title": "Animal Encounters part 1"`.

                  To enable filtering by custom fields:
                  1. Add metadata to your video by calling the the [`PUT`](/reference/update-video-information) method of the `/indexes/:index-id/videos/:video-id` endpoint
                  2. Use the custom fields as filter criteria in your queries. For example, to return only videos where a custom field named `needsReview` of type boolean is `true`, use: `"needs_review": true`.

                  For more details and examples, see the [Filter search results based on metadata](/docs/filtering-search-results) page.
                example: "{\"id\":[\"66284191ea717fa66a274832\"]}"                  

    search:
      content:
        application/json:
          schema:
            required:
              - query
              - index_id
              - search_options
            type: object
            properties:
              query:
                type: string
                description: |
                  Your search query. Note that the platform supports full natural language-based search. The following examples are valid queries: "birds flying near a castle," "sun shining on the water," "chickens on the road," "an officer holding a child's hand.", "crowd cheering in the stadium."
              index_id:
                type: string
                description: |
                  The unique identifier of the index to search.
              search_options:
                type: array
                items:
                  type: string
                minItems: 1
                maxItems: 4
                example:
                  - visual
                  - conversation
                  - text_in_video
                  - logo
                default:
                  - visual
                  - conversation
                  - text_in_video
                  - logo
                description: |
                  An array that specifies the sources of information the platform uses when performing a search. For details, see the [Search options](/docs/search-options) page.

                  **NOTES:** 
                  - The search options you specify must be a subset of the [engine options](/docs/engine-options) used when you created the index.
                  - You can specify multiple search options in conjunction with the `operator` parameter described below to broaden or narrow your search.
              adjust_confidence_level:
                type: number
                format: float
                description: |
                  This parameter specifies the strictness of the thresholds for assigning the high, medium, or low confidence levels to search results. If you use a lower value, the thresholds become more relaxed, and more search results will be classified as having high, medium, or low confidence levels. You can use this parameter to include a broader range of potentially relevant video clips, even if some results might be less precise. 

                  **Min**: 0
                  **Max**: 1
                  **Default:** 0.5
                default: 0.5
                example: 0.5

              group_by:
                type: string
                description: |
                  Use this parameter to group or ungroup items in a response. It can take one of the following values:
                  - `video`:  The platform will group the matching video clips in the response by video.
                  - `clip`: The matching video clips in the response will not be grouped.

                  **Default:** `clip`
                enum:
                  - video
                  - clip
                default: clip
              threshold:
                $ref: '#/components/schemas/threshold_search'
              sort_option:
                type: string
                description: |
                  Use this parameter to specify the sort order for the response.
                  
                  When performing a search, the platform determines the level of confidence that each video clip matches your search terms. By default, the search results are sorted on the level of confidence in descending order. 

                  If you set this parameter to `score` and `group_by` is set to `video`, the platform will determine the maximum value of the `score` field for each video and sort the videos in the response by the maximum value of this field. For each video, the matching video clips will be sorted by the level of confidence.

                  If you set this parameter to `clip_count` and `group_by` is set to `video`, the platform will sort the videos in the response by the number of clips. For each video, the matching video clips will be sorted by the level of confidence. You can use `clip_count` only when the matching video clips are sorted by video.
                  

                  **Default:** `score`
                enum:
                  - score
                  - clip_count
                default: score
              operator:
                type: string
                description: |
                  When you perform a search specifying multiple [sources of information](/docs/search-options), you can use the this parameter to broaden or narrow your search.
                    
                    The following logical operators are supported:
                    
                    - `or`
                    
                    - `and`
                    
                    For details and examples, see the [Using multiple sources of information](/docs/search-single-queries#using-multiple-sources-of-information) section.

                    
                    **Default**: `or`.
                example: or
                default: or
              conversation_option:
                $ref: '#/components/schemas/conversation_option'
              page_limit:
                type: integer
                description: |
                  The number of items to return on each page. When grouping by video, this parameter represents the number of videos per page. Otherwise, it represents the maximum number of video clips per page. 

                  **Max**: `50`.
                default: 10
              filter:
                type: object
                description: |
                  For string fields, the filter `parameter` returns only the results that equal the value you specify. The following example filters on the videos whose title is "Animal Encounters part 1": `"title": "Animal Encounters part 1"`.
                  
                  For numeric fields, the `filter` parameter returns the results that match based on the arithmetic comparison. The following example filters on the videos whose height is greater than or equal to 400 and less than or equal to 500: `"height": { "gte": 400, "lte": 500 }`.

                  To enable filtering by custom fields:
                  1. Add metadata to your video by calling the the [`PUT`](/reference/update-video-information) method of the `/indexes/:index-id/videos/:video-id` endpoint
                  2. Use the custom fields as filter criteria in your queries. For example, to return only videos where a custom field named `needsReview` of type boolean is `true`, use: `"needs_review": true`.

                  For more details and examples, see the [Filter search results based on metadata](/docs/filtering-search-results) page.
                properties:
                  id:
                    type: array
                    description: An array of strings that filters your search results based on the specified video IDs.
                    items:
                      type: string

                  duration:
                    type: object
                    description: |
                      This field filters your search results based on the duration of the video containing the segment that matches your query. 

                      The following example filters search results to include only the segments from videos with a duration greater than or equal to 600 seconds and less than or equal to 800 seconds: 
                      ```
                      "duration": {
                        "gte": 600,
                        "lte": 800
                      }
                      ```
                    properties:
                      gte:
                        type: number
                        format: float
                        description: |
                          This field specifies the minimum duration, expressed in seconds, of the video.
                      lte:
                        type: number
                        format: float
                        description: |
                          This field specifies the maximum duration, expressed in seconds, of the video.

                  width:
                    type: number
                    description: A numeric field that filters your search results based on width.
                  height:
                    type: number
                    description: A numeric field that filters your search results based on height.
                  size:
                    type: number
                    description: 'A numeric field that filters your search results based on size, expressed in bytes.'
                  title:
                    type: string
                    description: A string field that filters your search results based on the title of the video.

                additionalProperties: {}

    cloud-to-cloud-transfer:
      content:
        multipart/form-data:
          schema:
            type: object
            properties:
              file:
                description: |
                  A JSON file that contains a list. Each element of the list is an object representing a file to be uploaded and indexed and has the following fields:

                  - `index_id`: The unique identifier of the index to which the video file will be uploaded.
                  - `language`: The language of your video.
                  - `object`: The S3 URL of your video.
                  - _(Optional)_ `transcription`: The S3 URL of your transcription.

                  **Example:**
                  ```
                  [
                    {
                      "index_id": "6298d673f1090f1100476d4c",
                      "language": "en",
                      "object": "s3://twelve-labs-docs/01.mp4",
                      "transcription": "s3://twelve-labs-docs/01.srt"
                    },
                    {
                      "index_id": "6298d673f1090f1100476d4c",
                      "language": "en",
                      "object": "s3://twelve-labs-docs/02.mp4",
                      "transcription": "s3://twelve-labs-docs/02.srt"
                    }
                  ]
                  ```

                type: string
                format: binary

    upload-external-provider:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - index_id
              - url
            properties:
              index_id:
                type: string
                description: |
                  The unique identifier of the index to which the video is being uploaded.
              url:
                type: string
                description: |
                  The URL of the video that you wish to upload.
              
    createVideoIndexingTask:
      required: true
      content:
        multipart/form-data:
          schema:
            type: object
            required:
              - index_id
            properties:
              index_id:
                type: string
                description: |
                  The unique identifier of the index to which the video is being uploaded.
              provide_transcription:
                type: boolean
                description: |
                  A boolean value specifying whether or not you provide a transcription for this video.
                default: false
              language:
                type: string
                description: Must be set to `en`.
                default: en
              video_file:
                type: string
                format: binary
                description: |
                  Specify this parameter to upload a video from your local file system.
              transcription_file:
                type: string
                format: binary
                description: |
                  When the `provide_transcription` parameter is set to `true`, and you want to provide a transcription from the local file system, use the `transcription_file` parameter to pass your transcription file to the platform. It must be a stream of bytes encoded as `multipart/form-data`. The transcription must be in the SRT or VTT format.
              video_url:
                type: string
                description: |
                  Specify this parameter to upload a video from a publicly accessible URL.
              transcription_url:
                type: string
                description: |
                  When the `provide_transcription` parameter is set to `true`, and you want to provide a transcription from a publicly accessible URL, use the `transcription_url` parameter to specify the URL of your transcription. The transcription must be in the SRT or VTT format.
              disable_video_stream:
                type: boolean
                description: |
                  This parameter indicates if the platform stores the video for streaming. When set to `false`, the platform stores the video, and you can retrieve its URL by calling the [`GET`](/reference/retrieve-video-information) method of the `/indexes/{index-id}/videos/{video-id}` endpoint. You can then use this URL to access the stream over the <a href="https://en.wikipedia.org/wiki/HTTP_Live_Streaming" target="_blank">HLS</a> protocol.

                  **Default:** `false`
                default: false
                  
    updateIndex:
      content:
        application/json:
          schema:
            type: object
            required:
              - index_name
            properties:
              index_name:
                type: string
                description: |
                  The name of the index.


    createIndex:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - engines
                - index_name
              properties:
                index_name:
                  type: string
                  description: |
                    The name of the index. Make sure you use a succinct and descriptive name.
                engines:
                  type: array
                  description: |
                    An array that specifies the [video understanding engines](/docs/video-understanding-engines) and the [engine options](/docs/engine-options) to be enabled for this index. This determines how the platform processes your videos.
                  items:
                    type: object
                    required:
                      - engine_name
                      - engine_options
                    properties:
                      engine_name:
                        type: string
                        description: |
                          The name of the engine. The following engines are available:
                            
                            - **Embedding**: These engines are proficient at performing tasks such as search and classification, enabling enhanced video understanding.

                              - `marengo2.6`

                            - **Generative**: These engines generate text based on your videos.
      
                              - `pegasus1.1`
      
                          **NOTE:** You cannot change the engines once the index has been created.
      
                          For more details, see the [Video understanding engines](/docs/video-understanding-engines) page.
                      engine_options:
                        type: array
                        description: |
                          An array that specifies how the platform will process the videos uploaded to this index. For more details, see the [Engine options](/docs/engine-options) page.

                          **NOTES:**
                          - When using the Marengo family of video understanding engines, specify any combination of the available engine options - `visual`, `conversation`, `text_in_video`, and `logo`.
                          - When using the Pegasus family of video understanding engines, specify one or both of the following engine options: `visual` and `conversation`.
                        items:
                          type: string
                        minItems: 1
                        maxItems: 4
                addons:
                  type: array
                  description: |
                    An array specifying which add-ons should be enabled. Each entry in the array is an addon, and the following values are supported:
                    - `thumbnail`: Enables [thumbnail generation](/docs/extract-video-data#retrieve-thumbnails).

                    If you don't provide this parameter, no add-ons will be enabled.

                    **NOTES:**
                      - You can only enable addons when using the Marengo video understanding engine.
                      - You cannot disable an add-on once the index has been created.
                  items:
                    type: string
                  minItems: 1
                  maxItems: 1
            example:
              index_name: myIndex
              engines:
                - engine_name: marengo2.6
                  engine_options:
                    - visual
                    - conversation
                    - text_in_video
                    - logo
                  addons:
                    - thumbnail
                - engine_name: pagasus1.0
                  engine_options:
                    - visual
                    - conversation
                    
